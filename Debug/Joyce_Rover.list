
Joyce_Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d08  08005d08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d08  08005d08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000010  08005d1c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005d1c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c78f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b15  00000000  00000000  0002c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ee  00000000  00000000  0002fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0ed  00000000  00000000  000472ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a57c  00000000  00000000  000553db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  000df9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005cc4 	.word	0x08005cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005cc4 	.word	0x08005cc4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_d2f>:
 8000938:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800093c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000940:	bf24      	itt	cs
 8000942:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000946:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094a:	d90d      	bls.n	8000968 <__aeabi_d2f+0x30>
 800094c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000950:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000954:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000958:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800095c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800096c:	d121      	bne.n	80009b2 <__aeabi_d2f+0x7a>
 800096e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000972:	bfbc      	itt	lt
 8000974:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000978:	4770      	bxlt	lr
 800097a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000982:	f1c2 0218 	rsb	r2, r2, #24
 8000986:	f1c2 0c20 	rsb	ip, r2, #32
 800098a:	fa10 f30c 	lsls.w	r3, r0, ip
 800098e:	fa20 f002 	lsr.w	r0, r0, r2
 8000992:	bf18      	it	ne
 8000994:	f040 0001 	orrne.w	r0, r0, #1
 8000998:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a4:	ea40 000c 	orr.w	r0, r0, ip
 80009a8:	fa23 f302 	lsr.w	r3, r3, r2
 80009ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b0:	e7cc      	b.n	800094c <__aeabi_d2f+0x14>
 80009b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b6:	d107      	bne.n	80009c8 <__aeabi_d2f+0x90>
 80009b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009bc:	bf1e      	ittt	ne
 80009be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c6:	4770      	bxne	lr
 80009c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <__aeabi_frsub>:
 80009d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009dc:	e002      	b.n	80009e4 <__addsf3>
 80009de:	bf00      	nop

080009e0 <__aeabi_fsub>:
 80009e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e4 <__addsf3>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	bf1f      	itttt	ne
 80009e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009ec:	ea92 0f03 	teqne	r2, r3
 80009f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f8:	d06a      	beq.n	8000ad0 <__addsf3+0xec>
 80009fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a02:	bfc1      	itttt	gt
 8000a04:	18d2      	addgt	r2, r2, r3
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	4048      	eorgt	r0, r1
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	bfb8      	it	lt
 8000a0e:	425b      	neglt	r3, r3
 8000a10:	2b19      	cmp	r3, #25
 8000a12:	bf88      	it	hi
 8000a14:	4770      	bxhi	lr
 8000a16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a32:	bf18      	it	ne
 8000a34:	4249      	negne	r1, r1
 8000a36:	ea92 0f03 	teq	r2, r3
 8000a3a:	d03f      	beq.n	8000abc <__addsf3+0xd8>
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	fa41 fc03 	asr.w	ip, r1, r3
 8000a44:	eb10 000c 	adds.w	r0, r0, ip
 8000a48:	f1c3 0320 	rsb	r3, r3, #32
 8000a4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000a50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a54:	d502      	bpl.n	8000a5c <__addsf3+0x78>
 8000a56:	4249      	negs	r1, r1
 8000a58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a60:	d313      	bcc.n	8000a8a <__addsf3+0xa6>
 8000a62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a66:	d306      	bcc.n	8000a76 <__addsf3+0x92>
 8000a68:	0840      	lsrs	r0, r0, #1
 8000a6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6e:	f102 0201 	add.w	r2, r2, #1
 8000a72:	2afe      	cmp	r2, #254	; 0xfe
 8000a74:	d251      	bcs.n	8000b1a <__addsf3+0x136>
 8000a76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7e:	bf08      	it	eq
 8000a80:	f020 0001 	biceq.w	r0, r0, #1
 8000a84:	ea40 0003 	orr.w	r0, r0, r3
 8000a88:	4770      	bx	lr
 8000a8a:	0049      	lsls	r1, r1, #1
 8000a8c:	eb40 0000 	adc.w	r0, r0, r0
 8000a90:	3a01      	subs	r2, #1
 8000a92:	bf28      	it	cs
 8000a94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a98:	d2ed      	bcs.n	8000a76 <__addsf3+0x92>
 8000a9a:	fab0 fc80 	clz	ip, r0
 8000a9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa2:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aaa:	bfaa      	itet	ge
 8000aac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab0:	4252      	neglt	r2, r2
 8000ab2:	4318      	orrge	r0, r3
 8000ab4:	bfbc      	itt	lt
 8000ab6:	40d0      	lsrlt	r0, r2
 8000ab8:	4318      	orrlt	r0, r3
 8000aba:	4770      	bx	lr
 8000abc:	f092 0f00 	teq	r2, #0
 8000ac0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac4:	bf06      	itte	eq
 8000ac6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aca:	3201      	addeq	r2, #1
 8000acc:	3b01      	subne	r3, #1
 8000ace:	e7b5      	b.n	8000a3c <__addsf3+0x58>
 8000ad0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad8:	bf18      	it	ne
 8000ada:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ade:	d021      	beq.n	8000b24 <__addsf3+0x140>
 8000ae0:	ea92 0f03 	teq	r2, r3
 8000ae4:	d004      	beq.n	8000af0 <__addsf3+0x10c>
 8000ae6:	f092 0f00 	teq	r2, #0
 8000aea:	bf08      	it	eq
 8000aec:	4608      	moveq	r0, r1
 8000aee:	4770      	bx	lr
 8000af0:	ea90 0f01 	teq	r0, r1
 8000af4:	bf1c      	itt	ne
 8000af6:	2000      	movne	r0, #0
 8000af8:	4770      	bxne	lr
 8000afa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000afe:	d104      	bne.n	8000b0a <__addsf3+0x126>
 8000b00:	0040      	lsls	r0, r0, #1
 8000b02:	bf28      	it	cs
 8000b04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b08:	4770      	bx	lr
 8000b0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b0e:	bf3c      	itt	cc
 8000b10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bxcc	lr
 8000b16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	4770      	bx	lr
 8000b24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b28:	bf16      	itet	ne
 8000b2a:	4608      	movne	r0, r1
 8000b2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b30:	4601      	movne	r1, r0
 8000b32:	0242      	lsls	r2, r0, #9
 8000b34:	bf06      	itte	eq
 8000b36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3a:	ea90 0f01 	teqeq	r0, r1
 8000b3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_ui2f>:
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e004      	b.n	8000b54 <__aeabi_i2f+0x8>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_i2f>:
 8000b4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b50:	bf48      	it	mi
 8000b52:	4240      	negmi	r0, r0
 8000b54:	ea5f 0c00 	movs.w	ip, r0
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b60:	4601      	mov	r1, r0
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	e01c      	b.n	8000ba2 <__aeabi_l2f+0x2a>

08000b68 <__aeabi_ul2f>:
 8000b68:	ea50 0201 	orrs.w	r2, r0, r1
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e00a      	b.n	8000b8c <__aeabi_l2f+0x14>
 8000b76:	bf00      	nop

08000b78 <__aeabi_l2f>:
 8000b78:	ea50 0201 	orrs.w	r2, r0, r1
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__aeabi_l2f+0x14>
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	ea5f 0c01 	movs.w	ip, r1
 8000b90:	bf02      	ittt	eq
 8000b92:	4684      	moveq	ip, r0
 8000b94:	4601      	moveq	r1, r0
 8000b96:	2000      	moveq	r0, #0
 8000b98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ba6:	fabc f28c 	clz	r2, ip
 8000baa:	3a08      	subs	r2, #8
 8000bac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb0:	db10      	blt.n	8000bd4 <__aeabi_l2f+0x5c>
 8000bb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bbc:	f1c2 0220 	rsb	r2, r2, #32
 8000bc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc8:	eb43 0002 	adc.w	r0, r3, r2
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f102 0220 	add.w	r2, r2, #32
 8000bd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bdc:	f1c2 0220 	rsb	r2, r2, #32
 8000be0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be4:	fa21 f202 	lsr.w	r2, r1, r2
 8000be8:	eb43 0002 	adc.w	r0, r3, r2
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_fmul>:
 8000bf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c02:	ea92 0f0c 	teqne	r2, ip
 8000c06:	ea93 0f0c 	teqne	r3, ip
 8000c0a:	d06f      	beq.n	8000cec <__aeabi_fmul+0xf8>
 8000c0c:	441a      	add	r2, r3
 8000c0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c12:	0240      	lsls	r0, r0, #9
 8000c14:	bf18      	it	ne
 8000c16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1a:	d01e      	beq.n	8000c5a <__aeabi_fmul+0x66>
 8000c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c28:	fba0 3101 	umull	r3, r1, r0, r1
 8000c2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c34:	bf3e      	ittt	cc
 8000c36:	0049      	lslcc	r1, r1, #1
 8000c38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	ea40 0001 	orr.w	r0, r0, r1
 8000c42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c46:	2afd      	cmp	r2, #253	; 0xfd
 8000c48:	d81d      	bhi.n	8000c86 <__aeabi_fmul+0x92>
 8000c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	4770      	bx	lr
 8000c5a:	f090 0f00 	teq	r0, #0
 8000c5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c62:	bf08      	it	eq
 8000c64:	0249      	lsleq	r1, r1, #9
 8000c66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6e:	3a7f      	subs	r2, #127	; 0x7f
 8000c70:	bfc2      	ittt	gt
 8000c72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7a:	4770      	bxgt	lr
 8000c7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	dc5d      	bgt.n	8000d44 <__aeabi_fmul+0x150>
 8000c88:	f112 0f19 	cmn.w	r2, #25
 8000c8c:	bfdc      	itt	le
 8000c8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c92:	4770      	bxle	lr
 8000c94:	f1c2 0200 	rsb	r2, r2, #0
 8000c98:	0041      	lsls	r1, r0, #1
 8000c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9e:	f1c2 0220 	rsb	r2, r2, #32
 8000ca2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000caa:	f140 0000 	adc.w	r0, r0, #0
 8000cae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb2:	bf08      	it	eq
 8000cb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb8:	4770      	bx	lr
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xce>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fmul+0xe6>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e78f      	b.n	8000c0c <__aeabi_fmul+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	bf18      	it	ne
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d00a      	beq.n	8000d12 <__aeabi_fmul+0x11e>
 8000cfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d00:	bf18      	it	ne
 8000d02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d06:	d1d8      	bne.n	8000cba <__aeabi_fmul+0xc6>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f090 0f00 	teq	r0, #0
 8000d16:	bf17      	itett	ne
 8000d18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	f091 0f00 	teqne	r1, #0
 8000d22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d26:	d014      	beq.n	8000d52 <__aeabi_fmul+0x15e>
 8000d28:	ea92 0f0c 	teq	r2, ip
 8000d2c:	d101      	bne.n	8000d32 <__aeabi_fmul+0x13e>
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	d10f      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d32:	ea93 0f0c 	teq	r3, ip
 8000d36:	d103      	bne.n	8000d40 <__aeabi_fmul+0x14c>
 8000d38:	024b      	lsls	r3, r1, #9
 8000d3a:	bf18      	it	ne
 8000d3c:	4608      	movne	r0, r1
 8000d3e:	d108      	bne.n	8000d52 <__aeabi_fmul+0x15e>
 8000d40:	ea80 0001 	eor.w	r0, r0, r1
 8000d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	4770      	bx	lr
 8000d52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fdiv>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d069      	beq.n	8000e48 <__aeabi_fdiv+0xec>
 8000d74:	eba2 0203 	sub.w	r2, r2, r3
 8000d78:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7c:	0249      	lsls	r1, r1, #9
 8000d7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d82:	d037      	beq.n	8000df4 <__aeabi_fdiv+0x98>
 8000d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	428b      	cmp	r3, r1
 8000d96:	bf38      	it	cc
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da2:	428b      	cmp	r3, r1
 8000da4:	bf24      	itt	cs
 8000da6:	1a5b      	subcs	r3, r3, r1
 8000da8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db0:	bf24      	itt	cs
 8000db2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dbe:	bf24      	itt	cs
 8000dc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dcc:	bf24      	itt	cs
 8000dce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dde:	d1e0      	bne.n	8000da2 <__aeabi_fdiv+0x46>
 8000de0:	2afd      	cmp	r2, #253	; 0xfd
 8000de2:	f63f af50 	bhi.w	8000c86 <__aeabi_fmul+0x92>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfc:	327f      	adds	r2, #127	; 0x7f
 8000dfe:	bfc2      	ittt	gt
 8000e00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e08:	4770      	bxgt	lr
 8000e0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	3a01      	subs	r2, #1
 8000e14:	e737      	b.n	8000c86 <__aeabi_fmul+0x92>
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xc2>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fdiv+0xda>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e795      	b.n	8000d74 <__aeabi_fdiv+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d108      	bne.n	8000e64 <__aeabi_fdiv+0x108>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	f47f af7d 	bne.w	8000d52 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	f47f af70 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e776      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e64:	ea93 0f0c 	teq	r3, ip
 8000e68:	d104      	bne.n	8000e74 <__aeabi_fdiv+0x118>
 8000e6a:	024b      	lsls	r3, r1, #9
 8000e6c:	f43f af4c 	beq.w	8000d08 <__aeabi_fmul+0x114>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e76e      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1ca      	bne.n	8000e16 <__aeabi_fdiv+0xba>
 8000e80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e84:	f47f af5c 	bne.w	8000d40 <__aeabi_fmul+0x14c>
 8000e88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e8c:	f47f af3c 	bne.w	8000d08 <__aeabi_fmul+0x114>
 8000e90:	e75f      	b.n	8000d52 <__aeabi_fmul+0x15e>
 8000e92:	bf00      	nop

08000e94 <__gesf2>:
 8000e94:	f04f 3cff 	mov.w	ip, #4294967295
 8000e98:	e006      	b.n	8000ea8 <__cmpsf2+0x4>
 8000e9a:	bf00      	nop

08000e9c <__lesf2>:
 8000e9c:	f04f 0c01 	mov.w	ip, #1
 8000ea0:	e002      	b.n	8000ea8 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__cmpsf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb8:	bf18      	it	ne
 8000eba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ebe:	d011      	beq.n	8000ee4 <__cmpsf2+0x40>
 8000ec0:	b001      	add	sp, #4
 8000ec2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec6:	bf18      	it	ne
 8000ec8:	ea90 0f01 	teqne	r0, r1
 8000ecc:	bf58      	it	pl
 8000ece:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed2:	bf88      	it	hi
 8000ed4:	17c8      	asrhi	r0, r1, #31
 8000ed6:	bf38      	it	cc
 8000ed8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000edc:	bf18      	it	ne
 8000ede:	f040 0001 	orrne.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee8:	d102      	bne.n	8000ef0 <__cmpsf2+0x4c>
 8000eea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eee:	d105      	bne.n	8000efc <__cmpsf2+0x58>
 8000ef0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef4:	d1e4      	bne.n	8000ec0 <__cmpsf2+0x1c>
 8000ef6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efa:	d0e1      	beq.n	8000ec0 <__cmpsf2+0x1c>
 8000efc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__aeabi_cfrcmple>:
 8000f04:	4684      	mov	ip, r0
 8000f06:	4608      	mov	r0, r1
 8000f08:	4661      	mov	r1, ip
 8000f0a:	e7ff      	b.n	8000f0c <__aeabi_cfcmpeq>

08000f0c <__aeabi_cfcmpeq>:
 8000f0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0e:	f7ff ffc9 	bl	8000ea4 <__cmpsf2>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	bf48      	it	mi
 8000f16:	f110 0f00 	cmnmi.w	r0, #0
 8000f1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f1c <__aeabi_fcmpeq>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff fff4 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f24:	bf0c      	ite	eq
 8000f26:	2001      	moveq	r0, #1
 8000f28:	2000      	movne	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmplt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffea 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmple>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffe0 	bl	8000f0c <__aeabi_cfcmpeq>
 8000f4c:	bf94      	ite	ls
 8000f4e:	2001      	movls	r0, #1
 8000f50:	2000      	movhi	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmpge>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffd2 	bl	8000f04 <__aeabi_cfrcmple>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpgt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffc8 	bl	8000f04 <__aeabi_cfrcmple>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_f2uiz>:
 8000f80:	0042      	lsls	r2, r0, #1
 8000f82:	d20e      	bcs.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f84:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f88:	d30b      	bcc.n	8000fa2 <__aeabi_f2uiz+0x22>
 8000f8a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f92:	d409      	bmi.n	8000fa8 <__aeabi_f2uiz+0x28>
 8000f94:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr
 8000fa8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fac:	d101      	bne.n	8000fb2 <__aeabi_f2uiz+0x32>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	d102      	bne.n	8000fb8 <__aeabi_f2uiz+0x38>
 8000fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f822 	bl	800102c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	461c      	mov	r4, r3
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}

08000ffe <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	b299      	uxth	r1, r3
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2202      	movs	r2, #2
 8001014:	f002 fb06 	bl	8003624 <HAL_I2C_IsDeviceReady>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf0c      	ite	eq
 800101e:	2301      	moveq	r3, #1
 8001020:	2300      	movne	r3, #0
 8001022:	b2db      	uxtb	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8001036:	f04f 0100 	mov.w	r1, #0
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f7ff ff6e 	bl	8000f1c <__aeabi_fcmpeq>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <MCP4725_setReferenceVoltage+0x22>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MCP4725_setReferenceVoltage+0x50>)
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	e002      	b.n	8001054 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
 800105e:	f7ff fe7d 	bl	8000d5c <__aeabi_fdiv>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff8b 	bl	8000f80 <__aeabi_f2uiz>
 800106a:	4603      	mov	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	819a      	strh	r2, [r3, #12]
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40533333 	.word	0x40533333

08001080 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	807b      	strh	r3, [r7, #2]
 8001092:	460b      	mov	r3, r1
 8001094:	707b      	strb	r3, [r7, #1]
 8001096:	4613      	mov	r3, r2
 8001098:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 800109a:	783b      	ldrb	r3, [r7, #0]
 800109c:	787a      	ldrb	r2, [r7, #1]
 800109e:	8879      	ldrh	r1, [r7, #2]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f822 	bl	80010ea <MCP4725_writeComand>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f895 	bl	80011ea <MCP4725_readRegister>
 80010c0:	4603      	mov	r3, r0
 80010c2:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d008      	beq.n	80010e0 <MCP4725_getEepromBusyFlag+0x30>
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e000      	b.n	80010e2 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af02      	add	r7, sp, #8
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	4603      	mov	r3, r0
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	460b      	mov	r3, r1
 80010fe:	707b      	strb	r3, [r7, #1]
 8001100:	4613      	mov	r3, r2
 8001102:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b60      	cmp	r3, #96	; 0x60
 8001108:	d028      	beq.n	800115c <MCP4725_writeComand+0x72>
 800110a:	2b60      	cmp	r3, #96	; 0x60
 800110c:	dc4a      	bgt.n	80011a4 <MCP4725_writeComand+0xba>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <MCP4725_writeComand+0x2e>
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d022      	beq.n	800115c <MCP4725_writeComand+0x72>
 8001116:	e045      	b.n	80011a4 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001118:	783b      	ldrb	r3, [r7, #0]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	b25a      	sxtb	r2, r3
 800111e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001122:	4313      	orrs	r3, r2
 8001124:	b25a      	sxtb	r2, r3
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b25b      	sxtb	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	b299      	uxth	r1, r3
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2302      	movs	r3, #2
 8001152:	f001 fefd 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
		
      break;
 800115a:	e023      	b.n	80011a4 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8001162:	783b      	ldrb	r3, [r7, #0]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b25a      	sxtb	r2, r3
 8001168:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800116c:	4313      	orrs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	b299      	uxth	r1, r3
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2303      	movs	r3, #3
 800119a:	f001 fed9 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	73fb      	strb	r3, [r7, #15]
		
			break;
 80011a2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MCP4725_writeComand+0xc4>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e019      	b.n	80011e2 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80011ae:	787b      	ldrb	r3, [r7, #1]
 80011b0:	2b60      	cmp	r3, #96	; 0x60
 80011b2:	d115      	bne.n	80011e0 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff7b 	bl	80010b0 <MCP4725_getEepromBusyFlag>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <MCP4725_writeComand+0xda>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00e      	b.n	80011e2 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80011c4:	2019      	movs	r0, #25
 80011c6:	f001 fa69 	bl	800269c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff70 	bl	80010b0 <MCP4725_getEepromBusyFlag>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <MCP4725_writeComand+0xf0>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e003      	b.n	80011e2 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80011da:	2019      	movs	r0, #25
 80011dc:	f001 fa5e 	bl	800269c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80011ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	466b      	mov	r3, sp
 80011fa:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001200:	2300      	movs	r3, #0
 8001202:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001204:	78f9      	ldrb	r1, [r7, #3]
 8001206:	460b      	mov	r3, r1
 8001208:	3b01      	subs	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	b2cb      	uxtb	r3, r1
 800120e:	2200      	movs	r2, #0
 8001210:	4698      	mov	r8, r3
 8001212:	4691      	mov	r9, r2
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001228:	b2cb      	uxtb	r3, r1
 800122a:	2200      	movs	r2, #0
 800122c:	461c      	mov	r4, r3
 800122e:	4615      	mov	r5, r2
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	00eb      	lsls	r3, r5, #3
 800123a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800123e:	00e2      	lsls	r2, r4, #3
 8001240:	460b      	mov	r3, r1
 8001242:	3307      	adds	r3, #7
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	ebad 0d03 	sub.w	sp, sp, r3
 800124c:	ab02      	add	r3, sp, #8
 800124e:	3300      	adds	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	b299      	uxth	r1, r3
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001264:	9200      	str	r2, [sp, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	f001 ff70 	bl	800314c <HAL_I2C_Master_Receive>
 800126c:	4603      	mov	r3, r0
 800126e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <MCP4725_readRegister+0x92>
 8001276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127a:	e01f      	b.n	80012bc <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b05      	cmp	r3, #5
 8001280:	d00a      	beq.n	8001298 <MCP4725_readRegister+0xae>
 8001282:	2b05      	cmp	r3, #5
 8001284:	dc19      	bgt.n	80012ba <MCP4725_readRegister+0xd0>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d002      	beq.n	8001290 <MCP4725_readRegister+0xa6>
 800128a:	2b03      	cmp	r3, #3
 800128c:	d004      	beq.n	8001298 <MCP4725_readRegister+0xae>
 800128e:	e014      	b.n	80012ba <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	82fb      	strh	r3, [r7, #22]

      break;
 8001296:	e010      	b.n	80012ba <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001298:	8abb      	ldrh	r3, [r7, #20]
 800129a:	3b02      	subs	r3, #2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	8abb      	ldrh	r3, [r7, #20]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	82fb      	strh	r3, [r7, #22]
      break;
 80012b8:	bf00      	nop
  }

  return ret_val;
 80012ba:	8afb      	ldrh	r3, [r7, #22]
 80012bc:	46b5      	mov	sp, r6
}
 80012be:	4618      	mov	r0, r3
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012c8 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	69b9      	ldr	r1, [r7, #24]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	1a8a      	subs	r2, r1, r2
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1acb      	subs	r3, r1, r3
 80012ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4413      	add	r3, r2
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001300:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001304:	b08f      	sub	sp, #60	; 0x3c
 8001306:	af00      	add	r7, sp, #0
 8001308:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim->Instance == TIM2) {
 800130a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001312:	f040 8111 	bne.w	8001538 <HAL_TIM_IC_CaptureCallback+0x238>
		switch (htim->Channel) {
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	2b04      	cmp	r3, #4
 800131c:	f000 80b6 	beq.w	800148c <HAL_TIM_IC_CaptureCallback+0x18c>
 8001320:	2b04      	cmp	r3, #4
 8001322:	f300 810b 	bgt.w	800153c <HAL_TIM_IC_CaptureCallback+0x23c>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d002      	beq.n	8001330 <HAL_TIM_IC_CaptureCallback+0x30>
 800132a:	2b02      	cmp	r3, #2
 800132c:	d057      	beq.n	80013de <HAL_TIM_IC_CaptureCallback+0xde>
				TIM2->CCER &= ~TIM_CCER_CC4P; // polariteyi yukselen kenar olarak ayarla
			}

			break;*/
		default:
			break;
 800132e:	e105      	b.n	800153c <HAL_TIM_IC_CaptureCallback+0x23c>
			if ((TIM2->CCER & TIM_CCER_CC1P) == 0) {
 8001330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d113      	bne.n	8001366 <HAL_TIM_IC_CaptureCallback+0x66>
				ch1_rising = TIM2->CCR1; // yukselen kenar degerini kaydet
 800133e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	2200      	movs	r2, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
 8001348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800134a:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800134c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001350:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC1P; // polariteyi düsen kenar olarak degistir
 8001354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	6213      	str	r3, [r2, #32]
			break;
 8001364:	e0eb      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
				ch1_falling = TIM2->CCR1;
 8001366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	2200      	movs	r2, #0
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	627a      	str	r2, [r7, #36]	; 0x24
 8001372:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001374:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001378:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch1 = ch1_falling - ch1_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_TIM_IC_CaptureCallback+0x250>)
 800137e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	ebb0 0a02 	subs.w	sl, r0, r2
 800138c:	eb61 0b03 	sbc.w	fp, r1, r3
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001392:	e9c3 ab00 	strd	sl, fp, [r3]
				if (pre_ch1 < 0) {
 8001396:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch1 < 2010 && pre_ch1 > 990) {
 800139c:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x254>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f240 71da 	movw	r1, #2010	; 0x7da
 80013a6:	428a      	cmp	r2, r1
 80013a8:	f173 0300 	sbcs.w	r3, r3, #0
 80013ac:	d20e      	bcs.n	80013cc <HAL_TIM_IC_CaptureCallback+0xcc>
 80013ae:	4b69      	ldr	r3, [pc, #420]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x254>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f240 31df 	movw	r1, #991	; 0x3df
 80013b8:	428a      	cmp	r2, r1
 80013ba:	f173 0300 	sbcs.w	r3, r3, #0
 80013be:	d305      	bcc.n	80013cc <HAL_TIM_IC_CaptureCallback+0xcc>
					ch1 = pre_ch1;
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_TIM_IC_CaptureCallback+0x254>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	4964      	ldr	r1, [pc, #400]	; (8001558 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC1P; // polariteyi yukselen kenar olarak ayarla
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d6:	f023 0302 	bic.w	r3, r3, #2
 80013da:	6213      	str	r3, [r2, #32]
			break;
 80013dc:	e0af      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
			if ((TIM2->CCER & TIM_CCER_CC2P) == 0) {
 80013de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d113      	bne.n	8001414 <HAL_TIM_IC_CaptureCallback+0x114>
				ch2_rising = TIM2->CCR2; // yukselen kenar degerini kaydet
 80013ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	2200      	movs	r2, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	61fa      	str	r2, [r7, #28]
 80013f8:	4b58      	ldr	r3, [pc, #352]	; (800155c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80013fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80013fe:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC2P; // polariteyi düsen kenar olarak degistir
 8001402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	6213      	str	r3, [r2, #32]
			break;
 8001412:	e094      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
				ch2_falling = TIM2->CCR2;
 8001414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	2200      	movs	r2, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	617a      	str	r2, [r7, #20]
 8001420:	4b4f      	ldr	r3, [pc, #316]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001422:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001426:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch2 = ch2_falling - ch2_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <HAL_TIM_IC_CaptureCallback+0x260>)
 800142c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	ebb0 0802 	subs.w	r8, r0, r2
 800143a:	eb61 0903 	sbc.w	r9, r1, r3
 800143e:	4b49      	ldr	r3, [pc, #292]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001440:	e9c3 8900 	strd	r8, r9, [r3]
				if (pre_ch2 < 0) {
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch2 < 2010 && pre_ch2 > 990) {
 800144a:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x264>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f240 71da 	movw	r1, #2010	; 0x7da
 8001454:	428a      	cmp	r2, r1
 8001456:	f173 0300 	sbcs.w	r3, r3, #0
 800145a:	d20e      	bcs.n	800147a <HAL_TIM_IC_CaptureCallback+0x17a>
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x264>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f240 31df 	movw	r1, #991	; 0x3df
 8001466:	428a      	cmp	r2, r1
 8001468:	f173 0300 	sbcs.w	r3, r3, #0
 800146c:	d305      	bcc.n	800147a <HAL_TIM_IC_CaptureCallback+0x17a>
					ch2 = pre_ch2;
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	493c      	ldr	r1, [pc, #240]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC2P; // polariteyi yukselen kenar olarak ayarla
 800147a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	f023 0320 	bic.w	r3, r3, #32
 8001488:	6213      	str	r3, [r2, #32]
			break;
 800148a:	e058      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
			if ((TIM2->CCER & TIM_CCER_CC3P) == 0) {
 800148c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001496:	2b00      	cmp	r3, #0
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_IC_CaptureCallback+0x1c2>
				ch3_rising = TIM2->CCR3; // yukselen kenar degerini kaydet
 800149a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a0:	2200      	movs	r2, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	60fa      	str	r2, [r7, #12]
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80014a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014ac:	e9c3 1200 	strd	r1, r2, [r3]
				TIM2->CCER |= TIM_CCER_CC3P; // polariteyi düsen kenar olarak degistir
 80014b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6213      	str	r3, [r2, #32]
			break;
 80014c0:	e03d      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
				ch3_falling = TIM2->CCR3;
 80014c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	2200      	movs	r2, #0
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x270>)
 80014d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014d4:	e9c3 1200 	strd	r1, r2, [r3]
				pre_ch3 = ch3_falling - ch3_rising; // dusen kenar degerini kaydet ve yukselen kenar degerinden cikar
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_TIM_IC_CaptureCallback+0x270>)
 80014da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	1a84      	subs	r4, r0, r2
 80014e6:	eb61 0503 	sbc.w	r5, r1, r3
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x274>)
 80014ec:	e9c3 4500 	strd	r4, r5, [r3]
				if (pre_ch3 < 0) {
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x274>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
				if (pre_ch3 < 2010 && pre_ch3 > 990) {
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x274>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f240 71da 	movw	r1, #2010	; 0x7da
 8001500:	428a      	cmp	r2, r1
 8001502:	f173 0300 	sbcs.w	r3, r3, #0
 8001506:	d20e      	bcs.n	8001526 <HAL_TIM_IC_CaptureCallback+0x226>
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x274>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f240 31df 	movw	r1, #991	; 0x3df
 8001512:	428a      	cmp	r2, r1
 8001514:	f173 0300 	sbcs.w	r3, r3, #0
 8001518:	d305      	bcc.n	8001526 <HAL_TIM_IC_CaptureCallback+0x226>
					ch3 = pre_ch3;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_TIM_IC_CaptureCallback+0x274>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	4915      	ldr	r1, [pc, #84]	; (8001578 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
				TIM2->CCER &= ~TIM_CCER_CC3P; // polariteyi yukselen kenar olarak ayarla
 8001526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001534:	6213      	str	r3, [r2, #32]
			break;
 8001536:	e002      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
		}
	}
 8001538:	bf00      	nop
 800153a:	e000      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x23e>
			break;
 800153c:	bf00      	nop
			break;
		default:
			break;
		}
	}*/
}
 800153e:	bf00      	nop
 8001540:	373c      	adds	r7, #60	; 0x3c
 8001542:	46bd      	mov	sp, r7
 8001544:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200001b0 	.word	0x200001b0
 8001550:	200001b8 	.word	0x200001b8
 8001554:	200001c8 	.word	0x200001c8
 8001558:	200001c0 	.word	0x200001c0
 800155c:	200001d0 	.word	0x200001d0
 8001560:	200001d8 	.word	0x200001d8
 8001564:	200001e8 	.word	0x200001e8
 8001568:	200001e0 	.word	0x200001e0
 800156c:	200001f0 	.word	0x200001f0
 8001570:	200001f8 	.word	0x200001f8
 8001574:	20000208 	.word	0x20000208
 8001578:	20000200 	.word	0x20000200

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 f829 	bl	80025d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 fac3 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158a:	f000 fd17 	bl	8001fbc <MX_GPIO_Init>
  MX_TIM1_Init();
 800158e:	f000 fb61 	bl	8001c54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001592:	f000 fc0d 	bl	8001db0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001596:	f000 fb01 	bl	8001b9c <MX_I2C1_Init>
  MX_I2C2_Init();
 800159a:	f000 fb2d 	bl	8001bf8 <MX_I2C2_Init>
  MX_TIM3_Init();
 800159e:	f000 fc97 	bl	8001ed0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LeftMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 5);
 80015a2:	4cad      	ldr	r4, [pc, #692]	; (8001858 <main+0x2dc>)
 80015a4:	4638      	mov	r0, r7
 80015a6:	4bad      	ldr	r3, [pc, #692]	; (800185c <main+0x2e0>)
 80015a8:	2260      	movs	r2, #96	; 0x60
 80015aa:	49ad      	ldr	r1, [pc, #692]	; (8001860 <main+0x2e4>)
 80015ac:	f7ff fd08 	bl	8000fc0 <MCP4725_init>
 80015b0:	463b      	mov	r3, r7
 80015b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RightMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A01, 5);
 80015b8:	4caa      	ldr	r4, [pc, #680]	; (8001864 <main+0x2e8>)
 80015ba:	4638      	mov	r0, r7
 80015bc:	4ba7      	ldr	r3, [pc, #668]	; (800185c <main+0x2e0>)
 80015be:	2261      	movs	r2, #97	; 0x61
 80015c0:	49a7      	ldr	r1, [pc, #668]	; (8001860 <main+0x2e4>)
 80015c2:	f7ff fcfd 	bl	8000fc0 <MCP4725_init>
 80015c6:	463b      	mov	r3, r7
 80015c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	48a5      	ldr	r0, [pc, #660]	; (8001868 <main+0x2ec>)
 80015d2:	f003 fa79 	bl	8004ac8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	48a3      	ldr	r0, [pc, #652]	; (8001868 <main+0x2ec>)
 80015da:	f003 fa75 	bl	8004ac8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80015de:	2108      	movs	r1, #8
 80015e0:	48a1      	ldr	r0, [pc, #644]	; (8001868 <main+0x2ec>)
 80015e2:	f003 fa71 	bl	8004ac8 <HAL_TIM_IC_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	48a0      	ldr	r0, [pc, #640]	; (800186c <main+0x2f0>)
 80015ea:	f003 f973 	bl	80048d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015ee:	2104      	movs	r1, #4
 80015f0:	489e      	ldr	r0, [pc, #632]	; (800186c <main+0x2f0>)
 80015f2:	f003 f96f 	bl	80048d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015f6:	2100      	movs	r1, #0
 80015f8:	489d      	ldr	r0, [pc, #628]	; (8001870 <main+0x2f4>)
 80015fa:	f003 f96b 	bl	80048d4 <HAL_TIM_PWM_Start>
#ifndef debug_mode
	while (!MCP4725_isConnected(&LeftMCP4725)
 80015fe:	e008      	b.n	8001612 <main+0x96>
			|| !MCP4725_isConnected(&RightMCP4725)) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	489b      	ldr	r0, [pc, #620]	; (8001874 <main+0x2f8>)
 8001606:	f001 fb2e 	bl	8002c66 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800160a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160e:	f001 f845 	bl	800269c <HAL_Delay>
	while (!MCP4725_isConnected(&LeftMCP4725)
 8001612:	4891      	ldr	r0, [pc, #580]	; (8001858 <main+0x2dc>)
 8001614:	f7ff fcf3 	bl	8000ffe <MCP4725_isConnected>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <main+0x84>
			|| !MCP4725_isConnected(&RightMCP4725)) {
 800161e:	4891      	ldr	r0, [pc, #580]	; (8001864 <main+0x2e8>)
 8001620:	f7ff fced 	bl	8000ffe <MCP4725_isConnected>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ea      	beq.n	8001600 <main+0x84>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifndef debug_mode
		if (ch3 <= 1500) {
 800162a:	4b93      	ldr	r3, [pc, #588]	; (8001878 <main+0x2fc>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8001634:	428a      	cmp	r2, r1
 8001636:	f173 0300 	sbcs.w	r3, r3, #0
 800163a:	d212      	bcs.n	8001662 <main+0xe6>
			maxpoint = 1900;
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <main+0x300>)
 800163e:	f240 726c 	movw	r2, #1900	; 0x76c
 8001642:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 8001644:	4b8e      	ldr	r3, [pc, #568]	; (8001880 <main+0x304>)
 8001646:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800164a:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 800164c:	4b8d      	ldr	r3, [pc, #564]	; (8001884 <main+0x308>)
 800164e:	f240 424c 	movw	r2, #1100	; 0x44c
 8001652:	601a      	str	r2, [r3, #0]
			deadband_scale = 32;
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <main+0x30c>)
 8001656:	2220      	movs	r2, #32
 8001658:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 800165a:	4b8c      	ldr	r3, [pc, #560]	; (800188c <main+0x310>)
 800165c:	2264      	movs	r2, #100	; 0x64
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e011      	b.n	8001686 <main+0x10a>
		} else {
			maxpoint = 1900;
 8001662:	4b86      	ldr	r3, [pc, #536]	; (800187c <main+0x300>)
 8001664:	f240 726c 	movw	r2, #1900	; 0x76c
 8001668:	601a      	str	r2, [r3, #0]
			midpoint = 1500;
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <main+0x304>)
 800166c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001670:	601a      	str	r2, [r3, #0]
			minpoint = 1100;
 8001672:	4b84      	ldr	r3, [pc, #528]	; (8001884 <main+0x308>)
 8001674:	f240 424c 	movw	r2, #1100	; 0x44c
 8001678:	601a      	str	r2, [r3, #0]
			deadband_scale = 32;
 800167a:	4b83      	ldr	r3, [pc, #524]	; (8001888 <main+0x30c>)
 800167c:	2220      	movs	r2, #32
 800167e:	601a      	str	r2, [r3, #0]
			motor_startup_deadband = 100;
 8001680:	4b82      	ldr	r3, [pc, #520]	; (800188c <main+0x310>)
 8001682:	2264      	movs	r2, #100	; 0x64
 8001684:	601a      	str	r2, [r3, #0]
		}

		ch1_smooth -= ch1_smooth / 10.0;
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <main+0x314>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fec2 	bl	8000414 <__aeabi_f2d>
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <main+0x318>)
 8001696:	f7ff f83f 	bl	8000718 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	461d      	mov	r5, r3
 80016a2:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <main+0x314>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe feb4 	bl	8000414 <__aeabi_f2d>
 80016ac:	4622      	mov	r2, r4
 80016ae:	462b      	mov	r3, r5
 80016b0:	f7fe fd50 	bl	8000154 <__aeabi_dsub>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff f93c 	bl	8000938 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a73      	ldr	r2, [pc, #460]	; (8001890 <main+0x314>)
 80016c4:	6013      	str	r3, [r2, #0]
		ch1_smooth += ch1 / 10.0;
 80016c6:	4b74      	ldr	r3, [pc, #464]	; (8001898 <main+0x31c>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7fe fec2 	bl	8000458 <__aeabi_ul2d>
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <main+0x318>)
 80016da:	f7ff f81d 	bl	8000718 <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4614      	mov	r4, r2
 80016e4:	461d      	mov	r5, r3
 80016e6:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <main+0x314>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe92 	bl	8000414 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4620      	mov	r0, r4
 80016f6:	4629      	mov	r1, r5
 80016f8:	f7fe fd2e 	bl	8000158 <__adddf3>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f918 	bl	8000938 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	4a61      	ldr	r2, [pc, #388]	; (8001890 <main+0x314>)
 800170c:	6013      	str	r3, [r2, #0]

		ch2_smooth -= ch2_smooth / 10.0;
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <main+0x320>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fe7e 	bl	8000414 <__aeabi_f2d>
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <main+0x318>)
 800171e:	f7fe fffb 	bl	8000718 <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <main+0x320>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fe70 	bl	8000414 <__aeabi_f2d>
 8001734:	4622      	mov	r2, r4
 8001736:	462b      	mov	r3, r5
 8001738:	f7fe fd0c 	bl	8000154 <__aeabi_dsub>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f8f8 	bl	8000938 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <main+0x320>)
 800174c:	6013      	str	r3, [r2, #0]
		ch2_smooth += ch2 / 10.0;
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <main+0x324>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7fe fe7e 	bl	8000458 <__aeabi_ul2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <main+0x318>)
 8001762:	f7fe ffd9 	bl	8000718 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x320>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe4e 	bl	8000414 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fcea 	bl	8000158 <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f8d4 	bl	8000938 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	4a42      	ldr	r2, [pc, #264]	; (800189c <main+0x320>)
 8001794:	6013      	str	r3, [r2, #0]

		left_output = (ch2_smooth + ((ch1_smooth - 1500) * 0.5));
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <main+0x320>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe3a 	bl	8000414 <__aeabi_f2d>
 80017a0:	4604      	mov	r4, r0
 80017a2:	460d      	mov	r5, r1
 80017a4:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <main+0x314>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	493e      	ldr	r1, [pc, #248]	; (80018a4 <main+0x328>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f918 	bl	80009e0 <__aeabi_fsub>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe2e 	bl	8000414 <__aeabi_f2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <main+0x32c>)
 80017be:	f7fe fe81 	bl	80004c4 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe fcc5 	bl	8000158 <__adddf3>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f887 	bl	80008e8 <__aeabi_d2iz>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a33      	ldr	r2, [pc, #204]	; (80018ac <main+0x330>)
 80017de:	6013      	str	r3, [r2, #0]
		if (left_output < midpoint - (deadband_scale / 4))
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <main+0x30c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <main+0x26e>
 80017e8:	3303      	adds	r3, #3
 80017ea:	109b      	asrs	r3, r3, #2
 80017ec:	425b      	negs	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <main+0x304>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	441a      	add	r2, r3
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <main+0x330>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd05      	ble.n	800180a <main+0x28e>
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	482b      	ldr	r0, [pc, #172]	; (80018b0 <main+0x334>)
 8001804:	f001 fa17 	bl	8002c36 <HAL_GPIO_WritePin>
 8001808:	e004      	b.n	8001814 <main+0x298>
		else
			HAL_GPIO_WritePin(GPIOA, left_motor_direction_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4828      	ldr	r0, [pc, #160]	; (80018b0 <main+0x334>)
 8001810:	f001 fa11 	bl	8002c36 <HAL_GPIO_WritePin>

		if (abs(left_output - midpoint) < (deadband_scale / 2))
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <main+0x330>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <main+0x304>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001822:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <main+0x30c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0fd9      	lsrs	r1, r3, #31
 800182c:	440b      	add	r3, r1
 800182e:	105b      	asrs	r3, r3, #1
 8001830:	429a      	cmp	r2, r3
 8001832:	da03      	bge.n	800183c <main+0x2c0>
			left_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <main+0x304>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <main+0x330>)
 800183a:	6013      	str	r3, [r2, #0]
		if (left_output > maxpoint - deadband_scale)
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <main+0x300>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <main+0x30c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad2      	subs	r2, r2, r3
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <main+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	da32      	bge.n	80018b4 <main+0x338>
			left_output = maxpoint;       //max 500
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <main+0x300>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <main+0x330>)
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e03a      	b.n	80018ce <main+0x352>
 8001858:	20000240 	.word	0x20000240
 800185c:	40a00000 	.word	0x40a00000
 8001860:	2000002c 	.word	0x2000002c
 8001864:	20000250 	.word	0x20000250
 8001868:	2000011c 	.word	0x2000011c
 800186c:	200000d4 	.word	0x200000d4
 8001870:	20000164 	.word	0x20000164
 8001874:	40011000 	.word	0x40011000
 8001878:	20000200 	.word	0x20000200
 800187c:	20000214 	.word	0x20000214
 8001880:	20000218 	.word	0x20000218
 8001884:	2000021c 	.word	0x2000021c
 8001888:	20000210 	.word	0x20000210
 800188c:	20000220 	.word	0x20000220
 8001890:	2000022c 	.word	0x2000022c
 8001894:	40240000 	.word	0x40240000
 8001898:	200001c0 	.word	0x200001c0
 800189c:	20000230 	.word	0x20000230
 80018a0:	200001e0 	.word	0x200001e0
 80018a4:	44bb8000 	.word	0x44bb8000
 80018a8:	3fe00000 	.word	0x3fe00000
 80018ac:	20000224 	.word	0x20000224
 80018b0:	40010800 	.word	0x40010800
		else if (left_output < minpoint + deadband_scale)
 80018b4:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <main+0x558>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b87      	ldr	r3, [pc, #540]	; (8001ad8 <main+0x55c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	441a      	add	r2, r3
 80018be:	4b87      	ldr	r3, [pc, #540]	; (8001adc <main+0x560>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dd03      	ble.n	80018ce <main+0x352>
			left_output = minpoint;  //min -500
 80018c6:	4b83      	ldr	r3, [pc, #524]	; (8001ad4 <main+0x558>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a84      	ldr	r2, [pc, #528]	; (8001adc <main+0x560>)
 80018cc:	6013      	str	r3, [r2, #0]

		right_output = (ch2_smooth - ((ch1_smooth - 1500) * 0.5));
 80018ce:	4b84      	ldr	r3, [pc, #528]	; (8001ae0 <main+0x564>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd9e 	bl	8000414 <__aeabi_f2d>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <main+0x568>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4981      	ldr	r1, [pc, #516]	; (8001ae8 <main+0x56c>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f87c 	bl	80009e0 <__aeabi_fsub>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd92 	bl	8000414 <__aeabi_f2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <main+0x570>)
 80018f6:	f7fe fde5 	bl	80004c4 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fc27 	bl	8000154 <__aeabi_dsub>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7fe ffeb 	bl	80008e8 <__aeabi_d2iz>
 8001912:	4603      	mov	r3, r0
 8001914:	4a76      	ldr	r2, [pc, #472]	; (8001af0 <main+0x574>)
 8001916:	6013      	str	r3, [r2, #0]
		if (right_output < midpoint - (deadband_scale / 4))
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <main+0x55c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <main+0x3a6>
 8001920:	3303      	adds	r3, #3
 8001922:	109b      	asrs	r3, r3, #2
 8001924:	425b      	negs	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b72      	ldr	r3, [pc, #456]	; (8001af4 <main+0x578>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	441a      	add	r2, r3
 800192e:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <main+0x574>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	dd05      	ble.n	8001942 <main+0x3c6>
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2110      	movs	r1, #16
 800193a:	486f      	ldr	r0, [pc, #444]	; (8001af8 <main+0x57c>)
 800193c:	f001 f97b 	bl	8002c36 <HAL_GPIO_WritePin>
 8001940:	e004      	b.n	800194c <main+0x3d0>
		else
			HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin, RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2110      	movs	r1, #16
 8001946:	486c      	ldr	r0, [pc, #432]	; (8001af8 <main+0x57c>)
 8001948:	f001 f975 	bl	8002c36 <HAL_GPIO_WritePin>

		if (abs(right_output - midpoint) < (deadband_scale / 2))
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <main+0x574>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <main+0x578>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800195a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800195e:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <main+0x55c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0fd9      	lsrs	r1, r3, #31
 8001964:	440b      	add	r3, r1
 8001966:	105b      	asrs	r3, r3, #1
 8001968:	429a      	cmp	r2, r3
 800196a:	da03      	bge.n	8001974 <main+0x3f8>
			right_output = midpoint;  //orta ölübant  (abs() -> mutlak değer)
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <main+0x578>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <main+0x574>)
 8001972:	6013      	str	r3, [r2, #0]
		if (right_output > maxpoint - deadband_scale)
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <main+0x580>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <main+0x55c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	1ad2      	subs	r2, r2, r3
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <main+0x574>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	da04      	bge.n	8001990 <main+0x414>
			right_output = maxpoint;       //max 500
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <main+0x580>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a59      	ldr	r2, [pc, #356]	; (8001af0 <main+0x574>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00c      	b.n	80019aa <main+0x42e>
		else if (right_output < minpoint + deadband_scale)
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <main+0x558>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <main+0x55c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	441a      	add	r2, r3
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <main+0x574>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dd03      	ble.n	80019aa <main+0x42e>
			right_output = minpoint;  //min -500
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <main+0x558>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <main+0x574>)
 80019a8:	6013      	str	r3, [r2, #0]

		if (left_output == midpoint && right_output == midpoint) {
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <main+0x560>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <main+0x578>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d10b      	bne.n	80019ce <main+0x452>
 80019b6:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <main+0x574>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <main+0x578>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d105      	bne.n	80019ce <main+0x452>
			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	484c      	ldr	r0, [pc, #304]	; (8001af8 <main+0x57c>)
 80019c8:	f001 f935 	bl	8002c36 <HAL_GPIO_WritePin>
 80019cc:	e004      	b.n	80019d8 <main+0x45c>
		} else {

			HAL_GPIO_WritePin(GPIOA, handbrake_Pin, RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	4849      	ldr	r0, [pc, #292]	; (8001af8 <main+0x57c>)
 80019d4:	f001 f92f 	bl	8002c36 <HAL_GPIO_WritePin>
		}

		if (left_output >= midpoint)
 80019d8:	4b40      	ldr	r3, [pc, #256]	; (8001adc <main+0x560>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <main+0x578>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	db0f      	blt.n	8001a04 <main+0x488>
			left_motor_pwm = map(left_output, midpoint, maxpoint, 0, 1000);
 80019e4:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <main+0x560>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <main+0x578>)
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <main+0x580>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	f7ff fc66 	bl	80012c8 <map>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <main+0x584>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e013      	b.n	8001a2c <main+0x4b0>
		else
			left_motor_pwm = abs(
					map(left_output, minpoint, midpoint, 0, 1000) - 1000);
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <main+0x560>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <main+0x558>)
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <main+0x578>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	f7ff fc56 	bl	80012c8 <map>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			left_motor_pwm = abs(
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bfb8      	it	lt
 8001a26:	425b      	neglt	r3, r3
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <main+0x584>)
 8001a2a:	6013      	str	r3, [r2, #0]

		if (right_output >= midpoint)
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <main+0x574>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <main+0x578>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	db0f      	blt.n	8001a58 <main+0x4dc>
			right_motor_pwm = map(right_output, midpoint, maxpoint, 0, 1000);
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <main+0x574>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <main+0x578>)
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <main+0x580>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f7ff fc3c 	bl	80012c8 <map>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a2c      	ldr	r2, [pc, #176]	; (8001b04 <main+0x588>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e013      	b.n	8001a80 <main+0x504>
		else
			right_motor_pwm = abs(
					map(right_output, minpoint, midpoint, 0, 1000) - 1000);
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <main+0x574>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <main+0x558>)
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <main+0x578>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f7ff fc2c 	bl	80012c8 <map>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
			right_motor_pwm = abs(
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfb8      	it	lt
 8001a7a:	425b      	neglt	r3, r3
 8001a7c:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <main+0x588>)
 8001a7e:	6013      	str	r3, [r2, #0]

		//i2c ile başlatılmış sürücünün bufferından output verilecek
		MCP4725_setValue(&LeftMCP4725,
				(uint16_t) (map(left_motor_pwm, 0, 1000, 800, 2500)),
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <main+0x584>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a92:	2100      	movs	r1, #0
 8001a94:	f7ff fc18 	bl	80012c8 <map>
 8001a98:	4603      	mov	r3, r0
		MCP4725_setValue(&LeftMCP4725,
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4819      	ldr	r0, [pc, #100]	; (8001b08 <main+0x58c>)
 8001aa2:	f7ff faed 	bl	8001080 <MCP4725_setValue>
				MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
		MCP4725_setValue(&RightMCP4725,
				(uint16_t) (map(right_motor_pwm, 0, 1000, 800, 2500)),
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <main+0x588>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001ab4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab8:	2100      	movs	r1, #0
 8001aba:	f7ff fc05 	bl	80012c8 <map>
 8001abe:	4603      	mov	r3, r0
		MCP4725_setValue(&RightMCP4725,
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4811      	ldr	r0, [pc, #68]	; (8001b0c <main+0x590>)
 8001ac8:	f7ff fada 	bl	8001080 <MCP4725_setValue>
				MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);

		HAL_Delay(20);
 8001acc:	2014      	movs	r0, #20
 8001ace:	f000 fde5 	bl	800269c <HAL_Delay>
		if (ch3 <= 1500) {
 8001ad2:	e5aa      	b.n	800162a <main+0xae>
 8001ad4:	2000021c 	.word	0x2000021c
 8001ad8:	20000210 	.word	0x20000210
 8001adc:	20000224 	.word	0x20000224
 8001ae0:	20000230 	.word	0x20000230
 8001ae4:	2000022c 	.word	0x2000022c
 8001ae8:	44bb8000 	.word	0x44bb8000
 8001aec:	3fe00000 	.word	0x3fe00000
 8001af0:	20000228 	.word	0x20000228
 8001af4:	20000218 	.word	0x20000218
 8001af8:	40010800 	.word	0x40010800
 8001afc:	20000214 	.word	0x20000214
 8001b00:	20000238 	.word	0x20000238
 8001b04:	2000023c 	.word	0x2000023c
 8001b08:	20000240 	.word	0x20000240
 8001b0c:	20000250 	.word	0x20000250

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b090      	sub	sp, #64	; 0x40
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0318 	add.w	r3, r7, #24
 8001b1a:	2228      	movs	r2, #40	; 0x28
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 f8c8 	bl	8005cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fa17 	bl	8003f8c <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b64:	f000 fb0c 	bl	8002180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2102      	movs	r1, #2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fc84 	bl	8004490 <HAL_RCC_ClockConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b8e:	f000 faf7 	bl	8002180 <Error_Handler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	3740      	adds	r7, #64	; 0x40
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_I2C1_Init+0x50>)
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <MX_I2C1_Init+0x54>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_I2C1_Init+0x50>)
 8001ba8:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <MX_I2C1_Init+0x58>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_I2C1_Init+0x50>)
 8001bda:	f001 f875 	bl	8002cc8 <HAL_I2C_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be4:	f000 facc 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000002c 	.word	0x2000002c
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	000186a0 	.word	0x000186a0

08001bf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <MX_I2C2_Init+0x54>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c04:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_I2C2_Init+0x58>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <MX_I2C2_Init+0x50>)
 8001c36:	f001 f847 	bl	8002cc8 <HAL_I2C_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c40:	f000 fa9e 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000080 	.word	0x20000080
 8001c4c:	40005800 	.word	0x40005800
 8001c50:	000186a0 	.word	0x000186a0

08001c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b096      	sub	sp, #88	; 0x58
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2220      	movs	r2, #32
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 f811 	bl	8005cb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c92:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001c94:	4a45      	ldr	r2, [pc, #276]	; (8001dac <MX_TIM1_Init+0x158>)
 8001c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 576-1;
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001c9a:	f240 223f 	movw	r2, #575	; 0x23f
 8001c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cc2:	f002 fd5f 	bl	8004784 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ccc:	f000 fa58 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4832      	ldr	r0, [pc, #200]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cde:	f003 fa65 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ce8:	f000 fa4a 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cec:	482e      	ldr	r0, [pc, #184]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001cee:	f002 fd98 	bl	8004822 <HAL_TIM_PWM_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cf8:	f000 fa42 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001d0c:	f003 feec 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001d16:	f000 fa33 	bl	8002180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1a:	2360      	movs	r3, #96	; 0x60
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481a      	ldr	r0, [pc, #104]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001d40:	f003 f972 	bl	8005028 <HAL_TIM_PWM_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001d4a:	f000 fa19 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	2204      	movs	r2, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4814      	ldr	r0, [pc, #80]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001d58:	f003 f966 	bl	8005028 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001d62:	f000 fa0d 	bl	8002180 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001d8a:	f003 ff0b 	bl	8005ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001d94:	f000 f9f4 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM1_Init+0x154>)
 8001d9a:	f000 fb21 	bl	80023e0 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3758      	adds	r7, #88	; 0x58
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200000d4 	.word	0x200000d4
 8001dac:	40012c00 	.word	0x40012c00

08001db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dda:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001de4:	2247      	movs	r2, #71	; 0x47
 8001de6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e02:	4832      	ldr	r0, [pc, #200]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e04:	f002 fcbe 	bl	8004784 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001e0e:	f000 f9b7 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482b      	ldr	r0, [pc, #172]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e20:	f003 f9c4 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e2a:	f000 f9a9 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e2e:	4827      	ldr	r0, [pc, #156]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e30:	f002 fdf2 	bl	8004a18 <HAL_TIM_IC_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e3a:	f000 f9a1 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	481f      	ldr	r0, [pc, #124]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e4e:	f003 fe4b 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001e58:	f000 f992 	bl	8002180 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e60:	2301      	movs	r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	4816      	ldr	r0, [pc, #88]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e74:	f003 f83c 	bl	8004ef0 <HAL_TIM_IC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e7e:	f000 f97f 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e82:	463b      	mov	r3, r7
 8001e84:	2204      	movs	r2, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001e8a:	f003 f831 	bl	8004ef0 <HAL_TIM_IC_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001e94:	f000 f974 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001ea0:	f003 f826 	bl	8004ef0 <HAL_TIM_IC_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001eaa:	f000 f969 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_TIM2_Init+0x11c>)
 8001eb6:	f003 f81b 	bl	8004ef0 <HAL_TIM_IC_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001ec0:	f000 f95e 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000011c 	.word	0x2000011c

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 0320 	add.w	r3, r7, #32
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f02:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <MX_TIM3_Init+0xe8>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f08:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001f0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0e:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f16:	2264      	movs	r2, #100	; 0x64
 8001f18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f26:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f28:	f002 fc2c 	bl	8004784 <HAL_TIM_Base_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001f32:	f000 f925 	bl	8002180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f40:	4619      	mov	r1, r3
 8001f42:	481c      	ldr	r0, [pc, #112]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f44:	f003 f932 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001f4e:	f000 f917 	bl	8002180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f52:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f54:	f002 fc65 	bl	8004822 <HAL_TIM_PWM_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f5e:	f000 f90f 	bl	8002180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f72:	f003 fdb9 	bl	8005ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f7c:	f000 f900 	bl	8002180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f80:	2360      	movs	r3, #96	; 0x60
 8001f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	4619      	mov	r1, r3
 8001f96:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001f98:	f003 f846 	bl	8005028 <HAL_TIM_PWM_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001fa2:	f000 f8ed 	bl	8002180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fa6:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_TIM3_Init+0xe4>)
 8001fa8:	f000 fa1a 	bl	80023e0 <HAL_TIM_MspPostInit>

}
 8001fac:	bf00      	nop
 8001fae:	3738      	adds	r7, #56	; 0x38
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000164 	.word	0x20000164
 8001fb8:	40000400 	.word	0x40000400

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a40      	ldr	r2, [pc, #256]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a34      	ldr	r2, [pc, #208]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b32      	ldr	r3, [pc, #200]	; (80020d8 <MX_GPIO_Init+0x11c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <MX_GPIO_Init+0x11c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <MX_GPIO_Init+0x11c>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <MX_GPIO_Init+0x11c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002036:	4829      	ldr	r0, [pc, #164]	; (80020dc <MX_GPIO_Init+0x120>)
 8002038:	f000 fdfd 	bl	8002c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, right_motor_direction_Pin|left_motor_direction_Pin|handbrake_Pin|shifter_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	21f0      	movs	r1, #240	; 0xf0
 8002040:	4827      	ldr	r0, [pc, #156]	; (80020e0 <MX_GPIO_Init+0x124>)
 8002042:	f000 fdf8 	bl	8002c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, left_break_output_Pin|right_break_output_Pin|Steering_Direction_2_Pin|Steering_Direction_1_Pin, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	212b      	movs	r1, #43	; 0x2b
 800204a:	4826      	ldr	r0, [pc, #152]	; (80020e4 <MX_GPIO_Init+0x128>)
 800204c:	f000 fdf3 	bl	8002c36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2302      	movs	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	481c      	ldr	r0, [pc, #112]	; (80020dc <MX_GPIO_Init+0x120>)
 800206a:	f000 fc49 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : right_motor_direction_Pin left_motor_direction_Pin handbrake_Pin shifter_Pin */
  GPIO_InitStruct.Pin = right_motor_direction_Pin|left_motor_direction_Pin|handbrake_Pin|shifter_Pin;
 800206e:	23f0      	movs	r3, #240	; 0xf0
 8002070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4619      	mov	r1, r3
 8002084:	4816      	ldr	r0, [pc, #88]	; (80020e0 <MX_GPIO_Init+0x124>)
 8002086:	f000 fc3b 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : left_break_output_Pin right_break_output_Pin Steering_Direction_2_Pin Steering_Direction_1_Pin */
  GPIO_InitStruct.Pin = left_break_output_Pin|right_break_output_Pin|Steering_Direction_2_Pin|Steering_Direction_1_Pin;
 800208a:	232b      	movs	r3, #43	; 0x2b
 800208c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2302      	movs	r3, #2
 8002098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	4619      	mov	r1, r3
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <MX_GPIO_Init+0x128>)
 80020a2:	f000 fc2d 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_A_Pin Encoder_B_Pin */
  GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 80020a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_GPIO_Init+0x12c>)
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	4619      	mov	r1, r3
 80020ba:	480a      	ldr	r0, [pc, #40]	; (80020e4 <MX_GPIO_Init+0x128>)
 80020bc:	f000 fc20 	bl	8002900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2017      	movs	r0, #23
 80020c6:	f000 fbe4 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ca:	2017      	movs	r0, #23
 80020cc:	f000 fbfd 	bl	80028ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40010800 	.word	0x40010800
 80020e4:	40010c00 	.word	0x40010c00
 80020e8:	10310000 	.word	0x10310000

080020ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Encoder_A_Pin){
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fc:	d11a      	bne.n	8002134 <HAL_GPIO_EXTI_Callback+0x48>
		if(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) == HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) Steering_Position++;
 80020fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002102:	481d      	ldr	r0, [pc, #116]	; (8002178 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002104:	f000 fd80 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	461c      	mov	r4, r3
 800210c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002110:	4819      	ldr	r0, [pc, #100]	; (8002178 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002112:	f000 fd79 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	429c      	cmp	r4, r3
 800211a:	d105      	bne.n	8002128 <HAL_GPIO_EXTI_Callback+0x3c>
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 8002124:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_Pin == Encoder_B_Pin){
		if(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) != HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) Steering_Position++;
		else Steering_Position--;
	}
}
 8002126:	e023      	b.n	8002170 <HAL_GPIO_EXTI_Callback+0x84>
		else Steering_Position--;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 8002130:	6013      	str	r3, [r2, #0]
}
 8002132:	e01d      	b.n	8002170 <HAL_GPIO_EXTI_Callback+0x84>
	else if(GPIO_Pin == Encoder_B_Pin){
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213a:	d119      	bne.n	8002170 <HAL_GPIO_EXTI_Callback+0x84>
		if(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) != HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) Steering_Position++;
 800213c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002142:	f000 fd61 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	461c      	mov	r4, r3
 800214a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800214e:	480a      	ldr	r0, [pc, #40]	; (8002178 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002150:	f000 fd5a 	bl	8002c08 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	429c      	cmp	r4, r3
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_EXTI_Callback+0x7a>
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	e004      	b.n	8002170 <HAL_GPIO_EXTI_Callback+0x84>
		else Steering_Position--;
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <HAL_GPIO_EXTI_Callback+0x90>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	40010c00 	.word	0x40010c00
 800217c:	20000234 	.word	0x20000234

08002180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002184:	b672      	cpsid	i
}
 8002186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002188:	e7fe      	b.n	8002188 <Error_Handler+0x8>
	...

0800218c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_MspInit+0x5c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_MspInit+0x5c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_MspInit+0x5c>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_MspInit+0x5c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_MspInit+0x60>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_MspInit+0x60>)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000

080021f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_I2C_MspInit+0xc8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d124      	bne.n	800225a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222c:	2312      	movs	r3, #18
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	4619      	mov	r1, r3
 800223a:	4821      	ldr	r0, [pc, #132]	; (80022c0 <HAL_I2C_MspInit+0xd0>)
 800223c:	f000 fb60 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224a:	61d3      	str	r3, [r2, #28]
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002258:	e029      	b.n	80022ae <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_I2C_MspInit+0xd4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d124      	bne.n	80022ae <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800227c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002282:	2312      	movs	r3, #18
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	4619      	mov	r1, r3
 8002290:	480b      	ldr	r0, [pc, #44]	; (80022c0 <HAL_I2C_MspInit+0xd0>)
 8002292:	f000 fb35 	bl	8002900 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 800229c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_I2C_MspInit+0xcc>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40005400 	.word	0x40005400
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00
 80022c4:	40005800 	.word	0x40005800

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a3b      	ldr	r2, [pc, #236]	; (80023d0 <HAL_TIM_Base_MspInit+0x108>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d12c      	bne.n	8002342 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a39      	ldr	r2, [pc, #228]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80022ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2018      	movs	r0, #24
 8002306:	f000 fac4 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800230a:	2018      	movs	r0, #24
 800230c:	f000 fadd 	bl	80028ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2019      	movs	r0, #25
 8002316:	f000 fabc 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800231a:	2019      	movs	r0, #25
 800231c:	f000 fad5 	bl	80028ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	201a      	movs	r0, #26
 8002326:	f000 fab4 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800232a:	201a      	movs	r0, #26
 800232c:	f000 facd 	bl	80028ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	201b      	movs	r0, #27
 8002336:	f000 faac 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800233a:	201b      	movs	r0, #27
 800233c:	f000 fac5 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002340:	e042      	b.n	80023c8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d12c      	bne.n	80023a6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800237c:	230f      	movs	r3, #15
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4619      	mov	r1, r3
 800238e:	4812      	ldr	r0, [pc, #72]	; (80023d8 <HAL_TIM_Base_MspInit+0x110>)
 8002390:	f000 fab6 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	201c      	movs	r0, #28
 800239a:	f000 fa7a 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800239e:	201c      	movs	r0, #28
 80023a0:	f000 fa93 	bl	80028ca <HAL_NVIC_EnableIRQ>
}
 80023a4:	e010      	b.n	80023c8 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_TIM_Base_MspInit+0x114>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10b      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	61d3      	str	r3, [r2, #28]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_TIM_Base_MspInit+0x10c>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010800 	.word	0x40010800
 80023dc:	40000400 	.word	0x40000400

080023e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_TIM_MspPostInit+0xbc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d119      	bne.n	8002434 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	481d      	ldr	r0, [pc, #116]	; (80024a4 <HAL_TIM_MspPostInit+0xc4>)
 800242e:	f000 fa67 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002432:	e02e      	b.n	8002492 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_TIM_MspPostInit+0xc8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d129      	bne.n	8002492 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_TIM_MspPostInit+0xc0>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Steering_Pwm_Pin;
 8002456:	2310      	movs	r3, #16
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Steering_Pwm_GPIO_Port, &GPIO_InitStruct);
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4619      	mov	r1, r3
 8002468:	4810      	ldr	r0, [pc, #64]	; (80024ac <HAL_TIM_MspPostInit+0xcc>)
 800246a:	f000 fa49 	bl	8002900 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_TIM_MspPostInit+0xd0>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_TIM_MspPostInit+0xd0>)
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	6053      	str	r3, [r2, #4]
}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010800 	.word	0x40010800
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40010c00 	.word	0x40010c00
 80024b0:	40010000 	.word	0x40010000

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 f8b3 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}

08002502 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_A_Pin);
 8002506:	f44f 7080 	mov.w	r0, #256	; 0x100
 800250a:	f000 fbc5 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Encoder_B_Pin);
 800250e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002512:	f000 fbc1 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM1_BRK_IRQHandler+0x10>)
 8002522:	f002 fbdd 	bl	8004ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200000d4 	.word	0x200000d4

08002530 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <TIM1_UP_IRQHandler+0x10>)
 8002536:	f002 fbd3 	bl	8004ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200000d4 	.word	0x200000d4

08002544 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <TIM1_TRG_COM_IRQHandler+0x10>)
 800254a:	f002 fbc9 	bl	8004ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200000d4 	.word	0x200000d4

08002558 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <TIM1_CC_IRQHandler+0x10>)
 800255e:	f002 fbbf 	bl	8004ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200000d4 	.word	0x200000d4

0800256c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <TIM2_IRQHandler+0x10>)
 8002572:	f002 fbb5 	bl	8004ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000011c 	.word	0x2000011c

08002580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800258c:	f7ff fff8 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002592:	490c      	ldr	r1, [pc, #48]	; (80025c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025a8:	4c09      	ldr	r4, [pc, #36]	; (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b6:	f003 fb59 	bl	8005c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ba:	f7fe ffdf 	bl	800157c <main>
  bx lr
 80025be:	4770      	bx	lr
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80025c8:	08005d10 	.word	0x08005d10
  ldr r2, =_sbss
 80025cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025d0:	20000264 	.word	0x20000264

080025d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_2_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_Init+0x28>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_Init+0x28>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f000 f947 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ee:	200f      	movs	r0, #15
 80025f0:	f000 f808 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f4:	f7ff fdca 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x54>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x58>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	fbb3 f3f1 	udiv	r3, r3, r1
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f95f 	bl	80028e6 <HAL_SYSTICK_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e00e      	b.n	8002650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b0f      	cmp	r3, #15
 8002636:	d80a      	bhi.n	800264e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002638:	2200      	movs	r2, #0
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f000 f927 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_InitTick+0x5c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000000 	.word	0x20000000
 800265c:	20000008 	.word	0x20000008
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_IncTick+0x1c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_IncTick+0x20>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_IncTick+0x20>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000008 	.word	0x20000008
 8002684:	20000260 	.word	0x20000260

08002688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <HAL_GetTick+0x10>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	20000260 	.word	0x20000260

0800269c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a4:	f7ff fff0 	bl	8002688 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d005      	beq.n	80026c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_Delay+0x44>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c2:	bf00      	nop
 80026c4:	f7ff ffe0 	bl	8002688 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d8f7      	bhi.n	80026c4 <HAL_Delay+0x28>
  {
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000008 	.word	0x20000008

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4906      	ldr	r1, [pc, #24]	; (800277c <__NVIC_EnableIRQ+0x34>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff90 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff2d 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff42 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff90 	bl	80027d4 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5f 	bl	8002780 <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff35 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b08b      	sub	sp, #44	; 0x2c
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	e169      	b.n	8002be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002914:	2201      	movs	r2, #1
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8158 	bne.w	8002be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a9a      	ldr	r2, [pc, #616]	; (8002ba0 <HAL_GPIO_Init+0x2a0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d05e      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
 800293c:	4a98      	ldr	r2, [pc, #608]	; (8002ba0 <HAL_GPIO_Init+0x2a0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d875      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 8002942:	4a98      	ldr	r2, [pc, #608]	; (8002ba4 <HAL_GPIO_Init+0x2a4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d058      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
 8002948:	4a96      	ldr	r2, [pc, #600]	; (8002ba4 <HAL_GPIO_Init+0x2a4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d86f      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 800294e:	4a96      	ldr	r2, [pc, #600]	; (8002ba8 <HAL_GPIO_Init+0x2a8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d052      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
 8002954:	4a94      	ldr	r2, [pc, #592]	; (8002ba8 <HAL_GPIO_Init+0x2a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d869      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 800295a:	4a94      	ldr	r2, [pc, #592]	; (8002bac <HAL_GPIO_Init+0x2ac>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d04c      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
 8002960:	4a92      	ldr	r2, [pc, #584]	; (8002bac <HAL_GPIO_Init+0x2ac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d863      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 8002966:	4a92      	ldr	r2, [pc, #584]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d046      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
 800296c:	4a90      	ldr	r2, [pc, #576]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d85d      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 8002972:	2b12      	cmp	r3, #18
 8002974:	d82a      	bhi.n	80029cc <HAL_GPIO_Init+0xcc>
 8002976:	2b12      	cmp	r3, #18
 8002978:	d859      	bhi.n	8002a2e <HAL_GPIO_Init+0x12e>
 800297a:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <HAL_GPIO_Init+0x80>)
 800297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002980:	080029fb 	.word	0x080029fb
 8002984:	080029d5 	.word	0x080029d5
 8002988:	080029e7 	.word	0x080029e7
 800298c:	08002a29 	.word	0x08002a29
 8002990:	08002a2f 	.word	0x08002a2f
 8002994:	08002a2f 	.word	0x08002a2f
 8002998:	08002a2f 	.word	0x08002a2f
 800299c:	08002a2f 	.word	0x08002a2f
 80029a0:	08002a2f 	.word	0x08002a2f
 80029a4:	08002a2f 	.word	0x08002a2f
 80029a8:	08002a2f 	.word	0x08002a2f
 80029ac:	08002a2f 	.word	0x08002a2f
 80029b0:	08002a2f 	.word	0x08002a2f
 80029b4:	08002a2f 	.word	0x08002a2f
 80029b8:	08002a2f 	.word	0x08002a2f
 80029bc:	08002a2f 	.word	0x08002a2f
 80029c0:	08002a2f 	.word	0x08002a2f
 80029c4:	080029dd 	.word	0x080029dd
 80029c8:	080029f1 	.word	0x080029f1
 80029cc:	4a79      	ldr	r2, [pc, #484]	; (8002bb4 <HAL_GPIO_Init+0x2b4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029d2:	e02c      	b.n	8002a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	623b      	str	r3, [r7, #32]
          break;
 80029da:	e029      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	3304      	adds	r3, #4
 80029e2:	623b      	str	r3, [r7, #32]
          break;
 80029e4:	e024      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	3308      	adds	r3, #8
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e01f      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	330c      	adds	r3, #12
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e01a      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a02:	2304      	movs	r3, #4
 8002a04:	623b      	str	r3, [r7, #32]
          break;
 8002a06:	e013      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a10:	2308      	movs	r3, #8
 8002a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	611a      	str	r2, [r3, #16]
          break;
 8002a1a:	e009      	b.n	8002a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	615a      	str	r2, [r3, #20]
          break;
 8002a26:	e003      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
          break;
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x130>
          break;
 8002a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d801      	bhi.n	8002a3a <HAL_GPIO_Init+0x13a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_Init+0x13e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d802      	bhi.n	8002a4c <HAL_GPIO_Init+0x14c>
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	e002      	b.n	8002a52 <HAL_GPIO_Init+0x152>
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	3b08      	subs	r3, #8
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	210f      	movs	r1, #15
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	6a39      	ldr	r1, [r7, #32]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80b1 	beq.w	8002be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a80:	4b4d      	ldr	r3, [pc, #308]	; (8002bb8 <HAL_GPIO_Init+0x2b8>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <HAL_GPIO_Init+0x2b8>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_GPIO_Init+0x2b8>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_GPIO_Init+0x2bc>)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	220f      	movs	r2, #15
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_GPIO_Init+0x2c0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_GPIO_Init+0x1ec>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3f      	ldr	r2, [pc, #252]	; (8002bc4 <HAL_GPIO_Init+0x2c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00d      	beq.n	8002ae8 <HAL_GPIO_Init+0x1e8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_GPIO_Init+0x2c8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_Init+0x1e4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3d      	ldr	r2, [pc, #244]	; (8002bcc <HAL_GPIO_Init+0x2cc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_GPIO_Init+0x1e0>
 8002adc:	2303      	movs	r3, #3
 8002ade:	e006      	b.n	8002aee <HAL_GPIO_Init+0x1ee>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e004      	b.n	8002aee <HAL_GPIO_Init+0x1ee>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e002      	b.n	8002aee <HAL_GPIO_Init+0x1ee>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_GPIO_Init+0x1ee>
 8002aec:	2300      	movs	r3, #0
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	f002 0203 	and.w	r2, r2, #3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4093      	lsls	r3, r2
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002afe:	492f      	ldr	r1, [pc, #188]	; (8002bbc <HAL_GPIO_Init+0x2bc>)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	492c      	ldr	r1, [pc, #176]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	4928      	ldr	r1, [pc, #160]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4922      	ldr	r1, [pc, #136]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	491e      	ldr	r1, [pc, #120]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4918      	ldr	r1, [pc, #96]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	4914      	ldr	r1, [pc, #80]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d021      	beq.n	8002bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_GPIO_Init+0x2d0>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
 8002b9c:	e021      	b.n	8002be2 <HAL_GPIO_Init+0x2e2>
 8002b9e:	bf00      	nop
 8002ba0:	10320000 	.word	0x10320000
 8002ba4:	10310000 	.word	0x10310000
 8002ba8:	10220000 	.word	0x10220000
 8002bac:	10210000 	.word	0x10210000
 8002bb0:	10120000 	.word	0x10120000
 8002bb4:	10110000 	.word	0x10110000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40010800 	.word	0x40010800
 8002bc4:	40010c00 	.word	0x40010c00
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	3301      	adds	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f47f ae8e 	bne.w	8002914 <HAL_GPIO_Init+0x14>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	372c      	adds	r7, #44	; 0x2c
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40010400 	.word	0x40010400

08002c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
 8002c24:	e001      	b.n	8002c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	807b      	strh	r3, [r7, #2]
 8002c42:	4613      	mov	r3, r2
 8002c44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c46:	787b      	ldrb	r3, [r7, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c52:	e003      	b.n	8002c5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	041a      	lsls	r2, r3, #16
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c78:	887a      	ldrh	r2, [r7, #2]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43d9      	mvns	r1, r3
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	400b      	ands	r3, r1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fa18 	bl	80020ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e12b      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fa7e 	bl	80021f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f001 fcf8 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d807      	bhi.n	8002d4c <HAL_I2C_Init+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_I2C_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x92>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_I2C_Init+0x27c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e7      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_I2C_Init+0x280>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2C_Init+0xd4>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e009      	b.n	8002db0 <HAL_I2C_Init+0xe8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_I2C_Init+0x284>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	495c      	ldr	r1, [pc, #368]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d819      	bhi.n	8002e04 <HAL_I2C_Init+0x13c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e59      	subs	r1, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de4:	400b      	ands	r3, r1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_I2C_Init+0x138>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	e051      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x168>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x196>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1bc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff fb90 	bl	8002688 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 80e0 	bne.w	8003138 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4970      	ldr	r1, [pc, #448]	; (8003144 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fdcc 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0d3      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Transmit+0x50>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0cc      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	; 0x21
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	893a      	ldrh	r2, [r7, #8]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_I2C_Master_Transmit+0x1f8>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003008:	8979      	ldrh	r1, [r7, #10]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fc36 	bl	8003880 <I2C_MasterRequestWrite>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e08d      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003034:	e066      	b.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fe8a 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b04      	cmp	r3, #4
 800304c:	d107      	bne.n	800305e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06b      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d11b      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6a39      	ldr	r1, [r7, #32]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fe81 	bl	8003de4 <I2C_WaitOnBTFFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d107      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01a      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d194      	bne.n	8003036 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	00100002 	.word	0x00100002
 8003148:	ffff0000 	.word	0xffff0000

0800314c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff fa90 	bl	8002688 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	f040 824b 	bne.w	800360e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2319      	movs	r3, #25
 800317e:	2201      	movs	r2, #1
 8003180:	497f      	ldr	r1, [pc, #508]	; (8003380 <HAL_I2C_Master_Receive+0x234>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fccc 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	e23e      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2C_Master_Receive+0x54>
 800319c:	2302      	movs	r3, #2
 800319e:	e237      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d007      	beq.n	80031c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2222      	movs	r2, #34	; 0x22
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a5f      	ldr	r2, [pc, #380]	; (8003384 <HAL_I2C_Master_Receive+0x238>)
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003208:	8979      	ldrh	r1, [r7, #10]
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fbb8 	bl	8003984 <I2C_MasterRequestRead>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1f8      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d113      	bne.n	800324e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e1cc      	b.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	2b01      	cmp	r3, #1
 8003254:	d11e      	bne.n	8003294 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003266:	b672      	cpsid	i
}
 8003268:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003290:	b662      	cpsie	i
}
 8003292:	e035      	b.n	8003300 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b02      	cmp	r3, #2
 800329a:	d11e      	bne.n	80032da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032d6:	b662      	cpsie	i
}
 80032d8:	e012      	b.n	8003300 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003300:	e172      	b.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	2b03      	cmp	r3, #3
 8003308:	f200 811f 	bhi.w	800354a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	2b01      	cmp	r3, #1
 8003312:	d123      	bne.n	800335c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fdab 	bl	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e173      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800335a:	e145      	b.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b02      	cmp	r3, #2
 8003362:	d152      	bne.n	800340a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	4906      	ldr	r1, [pc, #24]	; (8003388 <HAL_I2C_Master_Receive+0x23c>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fbd6 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e148      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000
 8003388:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033d2:	b662      	cpsie	i
}
 80033d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003408:	e0ee      	b.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	4981      	ldr	r1, [pc, #516]	; (8003618 <HAL_I2C_Master_Receive+0x4cc>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fb83 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0f5      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003434:	b672      	cpsid	i
}
 8003436:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800346a:	4b6c      	ldr	r3, [pc, #432]	; (800361c <HAL_I2C_Master_Receive+0x4d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	08db      	lsrs	r3, r3, #3
 8003470:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <HAL_I2C_Master_Receive+0x4d4>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0a1a      	lsrs	r2, r3, #8
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00da      	lsls	r2, r3, #3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	3b01      	subs	r3, #1
 8003488:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d118      	bne.n	80034c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034b2:	b662      	cpsie	i
}
 80034b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0a6      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d1d9      	bne.n	8003484 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003512:	b662      	cpsie	i
}
 8003514:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003548:	e04e      	b.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fc90 	bl	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e058      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d124      	bne.n	80035e8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d107      	bne.n	80035b6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f ae88 	bne.w	8003302 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	00010004 	.word	0x00010004
 800361c:	20000000 	.word	0x20000000
 8003620:	14f8b589 	.word	0x14f8b589

08003624 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff f828 	bl	8002688 <HAL_GetTick>
 8003638:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 8111 	bne.w	800386e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	4988      	ldr	r1, [pc, #544]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa62 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e104      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2C_IsDeviceReady+0x50>
 8003670:	2302      	movs	r3, #2
 8003672:	e0fd      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2224      	movs	r2, #36	; 0x24
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a70      	ldr	r2, [pc, #448]	; (800387c <HAL_I2C_IsDeviceReady+0x258>)
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa20 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f4:	d103      	bne.n	80036fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b6      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003710:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe ffb9 	bl	8002688 <HAL_GetTick>
 8003716:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003746:	e025      	b.n	8003794 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe ff9e 	bl	8002688 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <HAL_I2C_IsDeviceReady+0x13a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	22a0      	movs	r2, #160	; 0xa0
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2ba0      	cmp	r3, #160	; 0xa0
 800379e:	d005      	beq.n	80037ac <HAL_I2C_IsDeviceReady+0x188>
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_I2C_IsDeviceReady+0x188>
 80037a6:	7dbb      	ldrb	r3, [r7, #22]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0cd      	beq.n	8003748 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d129      	bne.n	8003816 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	4921      	ldr	r1, [pc, #132]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f994 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e036      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e02c      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003824:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800382e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2319      	movs	r3, #25
 8003836:	2201      	movs	r2, #1
 8003838:	490f      	ldr	r1, [pc, #60]	; (8003878 <HAL_I2C_IsDeviceReady+0x254>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f970 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e012      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	3301      	adds	r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	f4ff af32 	bcc.w	80036be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000

08003880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d006      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d003      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e00b      	b.n	80038d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d107      	bne.n	80038d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f91d 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e035      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d108      	bne.n	8003924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e01b      	b.n	800395c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	11db      	asrs	r3, r3, #7
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 030f 	orn	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <I2C_MasterRequestWrite+0xfc>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f966 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e010      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestWrite+0x100>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f956 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d006      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d003      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e00b      	b.n	80039e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d107      	bne.n	80039e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f893 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0e:	d103      	bne.n	8003a18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e079      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e05f      	b.n	8003af8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	11db      	asrs	r3, r3, #7
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f063 030f 	orn	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4930      	ldr	r1, [pc, #192]	; (8003b18 <I2C_MasterRequestRead+0x194>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f8dc 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e054      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4929      	ldr	r1, [pc, #164]	; (8003b1c <I2C_MasterRequestRead+0x198>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8cc 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e044      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f831 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d103      	bne.n	8003adc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e017      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ae0:	897b      	ldrh	r3, [r7, #10]
 8003ae2:	11db      	asrs	r3, r3, #7
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f063 030e 	orn	r3, r3, #14
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <I2C_MasterRequestRead+0x198>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f888 	bl	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00010008 	.word	0x00010008
 8003b1c:	00010002 	.word	0x00010002

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e048      	b.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d044      	beq.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fda5 	bl	8002688 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d139      	bne.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10d      	bne.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	e00c      	b.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d116      	bne.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e023      	b.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	e00c      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d093      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c22:	e071      	b.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c32:	d123      	bne.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0204 	orr.w	r2, r3, #4
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e067      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d041      	beq.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c84:	f7fe fd00 	bl	8002688 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d136      	bne.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d10c      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e00b      	b.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	43da      	mvns	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e021      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10c      	bne.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e00b      	b.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af6d 	bne.w	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d60:	e034      	b.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8e3 	bl	8003f2e <I2C_IsAcknowledgeFailed>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e034      	b.n	8003ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d78:	d028      	beq.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe fc85 	bl	8002688 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11d      	bne.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d016      	beq.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d1c3      	bne.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df0:	e034      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f89b 	bl	8003f2e <I2C_IsAcknowledgeFailed>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e034      	b.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d028      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fe fc3d 	bl	8002688 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11d      	bne.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d016      	beq.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e007      	b.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d1c3      	bne.n	8003df2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e80:	e049      	b.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d119      	bne.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0210 	mvn.w	r2, #16
 8003e98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e030      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec4:	f7fe fbe0 	bl	8002688 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11d      	bne.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d016      	beq.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e007      	b.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d1ae      	bne.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f44:	d11b      	bne.n	8003f7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0204 	orr.w	r2, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e272      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8087 	beq.w	80040ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fac:	4b92      	ldr	r3, [pc, #584]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb8:	4b8f      	ldr	r3, [pc, #572]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x5e>
 8003fc4:	4b8c      	ldr	r3, [pc, #560]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x12c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d168      	bne.n	80040b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e24c      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x76>
 8003ff4:	4b80      	ldr	r3, [pc, #512]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7f      	ldr	r2, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0xd4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x98>
 800400a:	4b7b      	ldr	r3, [pc, #492]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b78      	ldr	r3, [pc, #480]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a77      	ldr	r2, [pc, #476]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800401c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xd4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0xbc>
 800402e:	4b72      	ldr	r3, [pc, #456]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a71      	ldr	r2, [pc, #452]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xd4>
 8004048:	4b6b      	ldr	r3, [pc, #428]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b68      	ldr	r3, [pc, #416]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a67      	ldr	r2, [pc, #412]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fe fb0e 	bl	8002688 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe fb0a 	bl	8002688 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e200      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xe4>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe fafa 	bl	8002688 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7fe faf6 	bl	8002688 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1ec      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x10c>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040d2:	4b49      	ldr	r3, [pc, #292]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x18c>
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b43      	ldr	r3, [pc, #268]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x176>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1c0      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4939      	ldr	r1, [pc, #228]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e03a      	b.n	800418e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_OscConfig+0x270>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fe faaf 	bl	8002688 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fe faab 	bl	8002688 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1a1      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4927      	ldr	r1, [pc, #156]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	e015      	b.n	800418e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <HAL_RCC_OscConfig+0x270>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe fa8e 	bl	8002688 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004170:	f7fe fa8a 	bl	8002688 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e180      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d03a      	beq.n	8004210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d019      	beq.n	80041d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_RCC_OscConfig+0x274>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fe fa6e 	bl	8002688 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fe fa6a 	bl	8002688 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e160      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041ce:	2001      	movs	r0, #1
 80041d0:	f000 faba 	bl	8004748 <RCC_Delay>
 80041d4:	e01c      	b.n	8004210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d6:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_RCC_OscConfig+0x274>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041dc:	f7fe fa54 	bl	8002688 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e2:	e00f      	b.n	8004204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fe fa50 	bl	8002688 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d908      	bls.n	8004204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e146      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	42420000 	.word	0x42420000
 8004200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	4b92      	ldr	r3, [pc, #584]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e9      	bne.n	80041e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a6 	beq.w	800436a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b8b      	ldr	r3, [pc, #556]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	4a87      	ldr	r2, [pc, #540]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	61d3      	str	r3, [r2, #28]
 800423a:	4b85      	ldr	r3, [pc, #532]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b82      	ldr	r3, [pc, #520]	; (8004454 <HAL_RCC_OscConfig+0x4c8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x4c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x4c8>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7fe fa11 	bl	8002688 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fe fa0d 	bl	8002688 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e103      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	4b75      	ldr	r3, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x4c8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x312>
 8004290:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	e02d      	b.n	80042fa <HAL_RCC_OscConfig+0x36e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x334>
 80042a6:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4a69      	ldr	r2, [pc, #420]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6213      	str	r3, [r2, #32]
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a66      	ldr	r2, [pc, #408]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6213      	str	r3, [r2, #32]
 80042be:	e01c      	b.n	80042fa <HAL_RCC_OscConfig+0x36e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x356>
 80042c8:	4b61      	ldr	r3, [pc, #388]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4a60      	ldr	r2, [pc, #384]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	6213      	str	r3, [r2, #32]
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a5d      	ldr	r2, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	e00b      	b.n	80042fa <HAL_RCC_OscConfig+0x36e>
 80042e2:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4a5a      	ldr	r2, [pc, #360]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	6213      	str	r3, [r2, #32]
 80042ee:	4b58      	ldr	r3, [pc, #352]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4a57      	ldr	r2, [pc, #348]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fe f9c1 	bl	8002688 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fe f9bd 	bl	8002688 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0b1      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCC_OscConfig+0x37e>
 800432c:	e014      	b.n	8004358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432e:	f7fe f9ab 	bl	8002688 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fe f9a7 	bl	8002688 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e09b      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	4b40      	ldr	r3, [pc, #256]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ee      	bne.n	8004336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b3c      	ldr	r3, [pc, #240]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	4a3b      	ldr	r2, [pc, #236]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 8087 	beq.w	8004482 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d061      	beq.n	8004444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d146      	bne.n	8004416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004388:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_RCC_OscConfig+0x4cc>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe f97b 	bl	8002688 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004396:	f7fe f977 	bl	8002688 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e06d      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d108      	bne.n	80043d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4921      	ldr	r1, [pc, #132]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a19      	ldr	r1, [r3, #32]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	430b      	orrs	r3, r1
 80043e2:	491b      	ldr	r1, [pc, #108]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCC_OscConfig+0x4cc>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fe f94b 	bl	8002688 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fe f947 	bl	8002688 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e03d      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x46a>
 8004414:	e035      	b.n	8004482 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x4cc>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe f934 	bl	8002688 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fe f930 	bl	8002688 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e026      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x498>
 8004442:	e01e      	b.n	8004482 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e019      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_OscConfig+0x500>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	429a      	cmp	r2, r3
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0d0      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d910      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b67      	ldr	r3, [pc, #412]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	4965      	ldr	r1, [pc, #404]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b63      	ldr	r3, [pc, #396]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b8      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ec:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800450e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b50      	ldr	r3, [pc, #320]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	494d      	ldr	r1, [pc, #308]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d040      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b47      	ldr	r3, [pc, #284]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e073      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06b      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4936      	ldr	r1, [pc, #216]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004580:	f7fe f882 	bl	8002688 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fe f87e 	bl	8002688 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e053      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1eb      	bne.n	8004588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d210      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	4922      	ldr	r1, [pc, #136]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e032      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4916      	ldr	r1, [pc, #88]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800461e:	f000 f821 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8004622:	4602      	mov	r2, r0
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	490a      	ldr	r1, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004630:	5ccb      	ldrb	r3, [r1, r3]
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1cc>)
 8004638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x1d0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fd ffe0 	bl	8002604 <HAL_InitTick>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40022000 	.word	0x40022000
 8004654:	40021000 	.word	0x40021000
 8004658:	08005cdc 	.word	0x08005cdc
 800465c:	20000000 	.word	0x20000000
 8004660:	20000004 	.word	0x20000004

08004664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b04      	cmp	r3, #4
 800468c:	d002      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x30>
 800468e:	2b08      	cmp	r3, #8
 8004690:	d003      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x36>
 8004692:	e027      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004696:	613b      	str	r3, [r7, #16]
      break;
 8004698:	e027      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	0c9b      	lsrs	r3, r3, #18
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046a4:	5cd3      	ldrb	r3, [r2, r3]
 80046a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0c5b      	lsrs	r3, r3, #17
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	4a11      	ldr	r2, [pc, #68]	; (8004704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_RCC_GetSysClockFreq+0x98>)
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e004      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a0c      	ldr	r2, [pc, #48]	; (8004708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	613b      	str	r3, [r7, #16]
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetSysClockFreq+0x98>)
 80046e6:	613b      	str	r3, [r7, #16]
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	693b      	ldr	r3, [r7, #16]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	007a1200 	.word	0x007a1200
 8004700:	08005cf4 	.word	0x08005cf4
 8004704:	08005d04 	.word	0x08005d04
 8004708:	003d0900 	.word	0x003d0900

0800470c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004710:	4b02      	ldr	r3, [pc, #8]	; (800471c <HAL_RCC_GetHCLKFreq+0x10>)
 8004712:	681b      	ldr	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	20000000 	.word	0x20000000

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004724:	f7ff fff2 	bl	800470c <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4903      	ldr	r1, [pc, #12]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000
 8004744:	08005cec 	.word	0x08005cec

08004748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <RCC_Delay+0x34>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <RCC_Delay+0x38>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a5b      	lsrs	r3, r3, #9
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004764:	bf00      	nop
  }
  while (Delay --);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1e5a      	subs	r2, r3, #1
 800476a:	60fa      	str	r2, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f9      	bne.n	8004764 <RCC_Delay+0x1c>
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	20000000 	.word	0x20000000
 8004780:	10624dd3 	.word	0x10624dd3

08004784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e041      	b.n	800481a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fd fd8c 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fdde 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e041      	b.n	80048b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f839 	bl	80048c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fd8f 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_TIM_PWM_Start+0x24>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e022      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d109      	bne.n	8004912 <HAL_TIM_PWM_Start+0x3e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e015      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d109      	bne.n	800492c <HAL_TIM_PWM_Start+0x58>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e008      	b.n	800493e <HAL_TIM_PWM_Start+0x6a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e05e      	b.n	8004a04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0x82>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	e013      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0x92>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	e00b      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	e003      	b.n	800497e <HAL_TIM_PWM_Start+0xaa>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f889 	bl	8005a9e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIM_PWM_Start+0x138>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIM_PWM_Start+0x138>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_TIM_PWM_Start+0xfa>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d009      	beq.n	80049ce <HAL_TIM_PWM_Start+0xfa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <HAL_TIM_PWM_Start+0x13c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIM_PWM_Start+0xfa>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <HAL_TIM_PWM_Start+0x140>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d111      	bne.n	80049f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d010      	beq.n	8004a02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f0:	e007      	b.n	8004a02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800

08004a18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e041      	b.n	8004aae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f839 	bl	8004ab6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f000 fc94 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x1e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e013      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x46>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x2e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e00b      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x46>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_IC_Start_IT+0x3e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e003      	b.n	8004b0e <HAL_TIM_IC_Start_IT+0x46>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_TIM_IC_Start_IT+0x58>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e013      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0x80>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_IC_Start_IT+0x68>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e00b      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0x80>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d104      	bne.n	8004b40 <HAL_TIM_IC_Start_IT+0x78>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e003      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b50:	7b7b      	ldrb	r3, [r7, #13]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d001      	beq.n	8004b5a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0b8      	b.n	8004ccc <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_IC_Start_IT+0xa2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	e013      	b.n	8004b92 <HAL_TIM_IC_Start_IT+0xca>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d104      	bne.n	8004b7a <HAL_TIM_IC_Start_IT+0xb2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b78:	e00b      	b.n	8004b92 <HAL_TIM_IC_Start_IT+0xca>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_IC_Start_IT+0xc2>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	e003      	b.n	8004b92 <HAL_TIM_IC_Start_IT+0xca>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_IC_Start_IT+0xda>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	e013      	b.n	8004bca <HAL_TIM_IC_Start_IT+0x102>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_IC_Start_IT+0xea>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb0:	e00b      	b.n	8004bca <HAL_TIM_IC_Start_IT+0x102>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_IC_Start_IT+0xfa>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	e003      	b.n	8004bca <HAL_TIM_IC_Start_IT+0x102>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d841      	bhi.n	8004c54 <HAL_TIM_IC_Start_IT+0x18c>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_TIM_IC_Start_IT+0x110>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c55 	.word	0x08004c55
 8004be0:	08004c55 	.word	0x08004c55
 8004be4:	08004c55 	.word	0x08004c55
 8004be8:	08004c1f 	.word	0x08004c1f
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004c55 	.word	0x08004c55
 8004bf4:	08004c55 	.word	0x08004c55
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004c55 	.word	0x08004c55
 8004c08:	08004c43 	.word	0x08004c43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	60da      	str	r2, [r3, #12]
      break;
 8004c1c:	e01d      	b.n	8004c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0204 	orr.w	r2, r2, #4
 8004c2c:	60da      	str	r2, [r3, #12]
      break;
 8004c2e:	e014      	b.n	8004c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	60da      	str	r2, [r3, #12]
      break;
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0210 	orr.w	r2, r2, #16
 8004c50:	60da      	str	r2, [r3, #12]
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d134      	bne.n	8004cca <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 ff18 	bl	8005a9e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <HAL_TIM_IC_Start_IT+0x20c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <HAL_TIM_IC_Start_IT+0x210>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_IC_Start_IT+0x1ce>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <HAL_TIM_IC_Start_IT+0x214>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d010      	beq.n	8004cca <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	e007      	b.n	8004cca <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800

08004ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0202 	mvn.w	r2, #2
 8004d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc faec 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fb0e 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fb14 	bl	800535e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0204 	mvn.w	r2, #4
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc fac2 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fae4 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 faea 	bl	800535e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0208 	mvn.w	r2, #8
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2204      	movs	r2, #4
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fa98 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 faba 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fac0 	bl	800535e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0210 	mvn.w	r2, #16
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc fa6e 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa90 	bl	800534c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa96 	bl	800535e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0201 	mvn.w	r2, #1
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa6b 	bl	800533a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d10e      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d107      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fee4 	bl	8005c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d10e      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d107      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa5a 	bl	8005370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0220 	mvn.w	r2, #32
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 feaf 	bl	8005c46 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e088      	b.n	8005020 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d11b      	bne.n	8004f54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f000 fc14 	bl	8005758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 020c 	bic.w	r2, r2, #12
 8004f3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	619a      	str	r2, [r3, #24]
 8004f52:	e060      	b.n	8005016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d11c      	bne.n	8004f94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f000 fc7d 	bl	8005868 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6999      	ldr	r1, [r3, #24]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	021a      	lsls	r2, r3, #8
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	e040      	b.n	8005016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d11b      	bne.n	8004fd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 fcc8 	bl	800593e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 020c 	bic.w	r2, r2, #12
 8004fbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	61da      	str	r2, [r3, #28]
 8004fd0:	e021      	b.n	8005016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d11c      	bne.n	8005012 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 fce4 	bl	80059b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ffa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69d9      	ldr	r1, [r3, #28]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
 8005010:	e001      	b.n	8005016 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0ae      	b.n	80051a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b0c      	cmp	r3, #12
 8005052:	f200 809f 	bhi.w	8005194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005091 	.word	0x08005091
 8005060:	08005195 	.word	0x08005195
 8005064:	08005195 	.word	0x08005195
 8005068:	08005195 	.word	0x08005195
 800506c:	080050d1 	.word	0x080050d1
 8005070:	08005195 	.word	0x08005195
 8005074:	08005195 	.word	0x08005195
 8005078:	08005195 	.word	0x08005195
 800507c:	08005113 	.word	0x08005113
 8005080:	08005195 	.word	0x08005195
 8005084:	08005195 	.word	0x08005195
 8005088:	08005195 	.word	0x08005195
 800508c:	08005153 	.word	0x08005153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 f9d6 	bl	8005448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0204 	bic.w	r2, r2, #4
 80050ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6999      	ldr	r1, [r3, #24]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	619a      	str	r2, [r3, #24]
      break;
 80050ce:	e064      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fa1c 	bl	8005514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6999      	ldr	r1, [r3, #24]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	619a      	str	r2, [r3, #24]
      break;
 8005110:	e043      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fa65 	bl	80055e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0208 	orr.w	r2, r2, #8
 800512c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0204 	bic.w	r2, r2, #4
 800513c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69d9      	ldr	r1, [r3, #28]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	61da      	str	r2, [r3, #28]
      break;
 8005150:	e023      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 faaf 	bl	80056bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69da      	ldr	r2, [r3, #28]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69d9      	ldr	r1, [r3, #28]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	021a      	lsls	r2, r3, #8
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	61da      	str	r2, [r3, #28]
      break;
 8005192:	e002      	b.n	800519a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
      break;
 8005198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x1c>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0b4      	b.n	8005332 <HAL_TIM_ConfigClockSource+0x186>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d03e      	beq.n	8005280 <HAL_TIM_ConfigClockSource+0xd4>
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005206:	f200 8087 	bhi.w	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	f000 8086 	beq.w	800531e <HAL_TIM_ConfigClockSource+0x172>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d87f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b70      	cmp	r3, #112	; 0x70
 800521a:	d01a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xa6>
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d87b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d050      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005224:	2b60      	cmp	r3, #96	; 0x60
 8005226:	d877      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b50      	cmp	r3, #80	; 0x50
 800522a:	d03c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xfa>
 800522c:	2b50      	cmp	r3, #80	; 0x50
 800522e:	d873      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d058      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d86f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d064      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d867      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d05a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	e062      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f000 fbfd 	bl	8005a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
      break;
 800527e:	e04f      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f000 fbe6 	bl	8005a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 faaa 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	; 0x50
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fbb4 	bl	8005a2c <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 fb04 	bl	80058e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	; 0x60
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fba4 	bl	8005a2c <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fa8a 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	; 0x40
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb94 	bl	8005a2c <TIM_ITRx_SetConfig>
      break;
 8005304:	e00c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f000 fb8b 	bl	8005a2c <TIM_ITRx_SetConfig>
      break;
 8005316:	e003      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e000      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
	...

08005384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a29      	ldr	r2, [pc, #164]	; (800543c <TIM_Base_SetConfig+0xb8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_Base_SetConfig+0x30>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d007      	beq.n	80053b4 <TIM_Base_SetConfig+0x30>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a26      	ldr	r2, [pc, #152]	; (8005440 <TIM_Base_SetConfig+0xbc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0x30>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <TIM_Base_SetConfig+0xc0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d108      	bne.n	80053c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1c      	ldr	r2, [pc, #112]	; (800543c <TIM_Base_SetConfig+0xb8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0x62>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <TIM_Base_SetConfig+0xbc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0x62>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <TIM_Base_SetConfig+0xc0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <TIM_Base_SetConfig+0xb8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800

08005448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 0201 	bic.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 0302 	bic.w	r3, r3, #2
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <TIM_OC1_SetConfig+0xc8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10c      	bne.n	80054be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0308 	bic.w	r3, r3, #8
 80054aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <TIM_OC1_SetConfig+0xc8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d111      	bne.n	80054ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00

08005514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 0210 	bic.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <TIM_OC2_SetConfig+0xd0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10d      	bne.n	8005590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <TIM_OC2_SetConfig+0xd0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d113      	bne.n	80055c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00

080055e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <TIM_OC3_SetConfig+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10d      	bne.n	8005662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800564c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_OC3_SetConfig+0xd0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d113      	bne.n	8005692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00

080056bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <TIM_OC4_SetConfig+0x98>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	019b      	lsls	r3, r3, #6
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00

08005758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0201 	bic.w	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <TIM_TI1_SetConfig+0xa8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00b      	beq.n	800579e <TIM_TI1_SetConfig+0x46>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d007      	beq.n	800579e <TIM_TI1_SetConfig+0x46>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <TIM_TI1_SetConfig+0xac>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_TI1_SetConfig+0x46>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <TIM_TI1_SetConfig+0xb0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <TIM_TI1_SetConfig+0x4a>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <TIM_TI1_SetConfig+0x4c>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e003      	b.n	80057c2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f003 030a 	and.w	r3, r3, #10
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800

0800580c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 030a 	bic.w	r3, r3, #10
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f023 0210 	bic.w	r2, r3, #16
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	031b      	lsls	r3, r3, #12
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800590a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	031b      	lsls	r3, r3, #12
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800591c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	b2db      	uxtb	r3, r3
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800598e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	031b      	lsls	r3, r3, #12
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a06:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	031b      	lsls	r3, r3, #12
 8005a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f043 0307 	orr.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr
	...

08005ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e046      	b.n	8005b8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10c      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800

08005ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e03d      	b.n	8005c3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
	...

08005c6c <__libc_init_array>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	2600      	movs	r6, #0
 8005c70:	4d0c      	ldr	r5, [pc, #48]	; (8005ca4 <__libc_init_array+0x38>)
 8005c72:	4c0d      	ldr	r4, [pc, #52]	; (8005ca8 <__libc_init_array+0x3c>)
 8005c74:	1b64      	subs	r4, r4, r5
 8005c76:	10a4      	asrs	r4, r4, #2
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	d109      	bne.n	8005c90 <__libc_init_array+0x24>
 8005c7c:	f000 f822 	bl	8005cc4 <_init>
 8005c80:	2600      	movs	r6, #0
 8005c82:	4d0a      	ldr	r5, [pc, #40]	; (8005cac <__libc_init_array+0x40>)
 8005c84:	4c0a      	ldr	r4, [pc, #40]	; (8005cb0 <__libc_init_array+0x44>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	d105      	bne.n	8005c9a <__libc_init_array+0x2e>
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c94:	4798      	blx	r3
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7ee      	b.n	8005c78 <__libc_init_array+0xc>
 8005c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9e:	4798      	blx	r3
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	e7f2      	b.n	8005c8a <__libc_init_array+0x1e>
 8005ca4:	08005d08 	.word	0x08005d08
 8005ca8:	08005d08 	.word	0x08005d08
 8005cac:	08005d08 	.word	0x08005d08
 8005cb0:	08005d0c 	.word	0x08005d0c

08005cb4 <memset>:
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4402      	add	r2, r0
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
